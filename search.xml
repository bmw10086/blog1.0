<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用github+vercel无服务器搭建chatgpt3.5网站</title>
    <url>/2023/06/24/3-5%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用Github-Vercel无服务器搭建ChatGPT-3-5网站"><a href="#使用Github-Vercel无服务器搭建ChatGPT-3-5网站" class="headerlink" title="使用Github+Vercel无服务器搭建ChatGPT 3.5网站"></a>使用Github+Vercel无服务器搭建ChatGPT 3.5网站</h1><p>需要：</p>
<ol>
<li><h3 id="ChatGPT账号key"><a href="#ChatGPT账号key" class="headerlink" title="ChatGPT账号key"></a>ChatGPT账号key</h3></li>
<li><h3 id="Github账号"><a href="#Github账号" class="headerlink" title="Github账号"></a>Github账号</h3></li>
<li><h3 id="Vercel账号"><a href="#Vercel账号" class="headerlink" title="Vercel账号"></a>Vercel账号</h3></li>
<li><h3 id="项目作者的GitHub"><a href="#项目作者的GitHub" class="headerlink" title="项目作者的GitHub"></a>项目作者的GitHub</h3></li>
</ol>
<p>开始搭建：</p>
<p>1、打开项目，点击项目左下侧的Deploy进入Vercel页面</p>
<p><img src="/2023/06/24/3-5%E7%BD%91%E7%AB%99/1.png" alt="vercel页面"></p>
<p>2、然后用github登录成功(需要验证手机号)，选择github，然后自定义一个自己的名称-点击创建</p>
<p><img src="/2023/06/24/3-5%E7%BD%91%E7%AB%99/2.png" alt="验证"></p>
<p>3、填入自己的chatgpt的api-key，部署完成</p>
<p><img src="/2023/06/24/3-5%E7%BD%91%E7%AB%99/3.png" alt="成功"></p>
<p>4、点击Continue To Dashboard进入管理页面</p>
<p><img src="/2023/06/24/3-5%E7%BD%91%E7%AB%99/4.png" alt="管理界面"></p>
<p>5、访问vercel分配的网址即可，输入网址：</p>
<p><img src="/2023/06/24/3-5%E7%BD%91%E7%AB%99/5.png" alt="网页"></p>
]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>chatgpt</tag>
        <tag>vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA问题</title>
    <url>/2023/10/30/IDEA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、IDEA抽取方法快捷键打不开"><a href="#一、IDEA抽取方法快捷键打不开" class="headerlink" title="一、IDEA抽取方法快捷键打不开"></a>一、IDEA抽取方法快捷键打不开</h1><blockquote>
<p>Ctrl  + Alt   +M：打开IDEA中抽取方法</p>
</blockquote>
<p>自动抽取方法使用Ctrl+Alt+M打不开快捷键。</p>
<p>要么不是这个快捷键，</p>
<p>要么就被电脑中的应用全局占用。</p>
<p>如：</p>
<p><img src="/2023/10/30/IDEA%E9%97%AE%E9%A2%98/image-20230723172957384.png" alt="image-20230723172957384"></p>
<p>1、NVIDIA GeForce Experience中有快捷键相同，更换或者去掉</p>
<p><img src="/2023/10/30/IDEA%E9%97%AE%E9%A2%98/image-20230723172645588.png"></p>
<p>2、要不是网易云快捷键占用，去掉全局</p>
<p><img src="/2023/10/30/IDEA%E9%97%AE%E9%A2%98/image-20230723172919423.png" alt="image-20230723172919423"></p>
<p>之后就OK了</p>
<p><img src="/2023/10/30/IDEA%E9%97%AE%E9%A2%98/image-20230723173008430.png" alt="image-20230723173008430"></p>
<p><img src="/2023/10/30/IDEA%E9%97%AE%E9%A2%98/image-20230723173144089.png" alt="image-20230723173144089"></p>
<h1 id="二、IDEA-插件和美观设置"><a href="#二、IDEA-插件和美观设置" class="headerlink" title="二、IDEA 插件和美观设置"></a>二、IDEA 插件和美观设置</h1><p>1、IDEA运行进度条改变</p>
<p>2、写代码特效</p>
]]></content>
      <categories>
        <category>IDEA</category>
        <category>Question</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Question</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的使用</title>
    <url>/2023/09/05/Git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h1><p>1、了解Git基本概念</p>
<p>2、概述Git工作流程</p>
<p>3、能够使用Git常用命令</p>
<p>4、熟悉Git代码托管服务</p>
<p>5、使用IDEA操作Git</p>
<h2 id="一、版本控制"><a href="#一、版本控制" class="headerlink" title="一、版本控制"></a>一、版本控制</h2><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><blockquote>
<p>什么是版本控制    版本迭代   ，新的版本|版本管理器</p>
</blockquote>
<p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>
</ul>
<p>简单说就是用于管理多人协同开发项目的技术。</p>
<p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p>
<p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！</p>
<p>多人开发就必须要使用版本控制！</p>
<blockquote>
<p>常见的版本控制工具</p>
</blockquote>
<p>我们学习的东西，一定是当下最流行的！主流的版本控制器有如下这些：</p>
<ul>
<li><strong>Git</strong></li>
<li><strong>SVN</strong>（Subversion）</li>
<li><strong>CVS</strong>（Concurrent Versions System）</li>
<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>
<li><strong>TFS</strong>（Team Foundation Server）</li>
<li>Visual Studio Online</li>
</ul>
<p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是<strong>Git与SVN</strong></p>
<blockquote>
<p>版本控制分类</p>
</blockquote>
<p>1、本地版本控制</p>
<p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p>
<p>![image-20230706152323107](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706152323107.png)</p>
<p><strong>2、集中版本控制  SVN</strong></p>
<p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p>
<p>![image-20230706152440603](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706152440603.png)</p>
<p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p>
<p><strong>3、分布式版本控制 	Git</strong></p>
<p>每个人都拥有全部的代码！安全隐患！</p>
<p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p>
<p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p>
<p>![image-20230706152533733](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706152533733.png)</p>
<blockquote>
<h2 id="Git与SVN的主要区别"><a href="#Git与SVN的主要区别" class="headerlink" title="Git与SVN的主要区别"></a>Git与SVN的主要区别</h2></blockquote>
<p>SVN是<strong>集中式版本控制系统</strong>，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p>
<p>Git是<strong>分布式版本控制系统</strong>，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p>
<blockquote>
<p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>
</blockquote>
<h2 id="二、Git历史"><a href="#二、Git历史" class="headerlink" title="二、Git历史"></a>二、Git历史</h2><p>同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。</p>
<p>Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p>
<p>Linux社区中存在很多的大佬！破解研究 BitKeeper ！</p>
<p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。（2周左右！） 也就是后来的 Git！</p>
<p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>
<p>Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！</p>
<p>![image-20230706152923019](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706152923019.png)</p>
<p>Linux和Git之父李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰</p>
<h2 id="三、Git环境配置"><a href="#三、Git环境配置" class="headerlink" title="三、Git环境配置"></a>三、Git环境配置</h2><blockquote>
<p>软件下载</p>
</blockquote>
<p>打开 [git官网] <a href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">https://git-scm.com/，下载git对应操作系统的版本。</a></p>
<p>所有东西下载慢的话就可以去找镜像！</p>
<p>官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p>
<p>![image-20230706153054423](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706153054423.png)</p>
<p>下载对应的版本即可安装！</p>
<p>安装：无脑下一步即可！安装完毕就可以使用了！</p>
<blockquote>
<p>启动Git</p>
</blockquote>
<p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p>
<p>![image-20230706153151665](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706153151665.png)</p>
<p><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多    clear，window   cls</p>
<p><strong>Git CMD：</strong>Windows风格的命令行</p>
<p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p>
<blockquote>
<p>常用的Linux命令</p>
</blockquote>
<p>平时一定要多使用这些基础的命令！</p>
<p>1）、cd : 改变目录。</p>
<p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p>
<p>3）、pwd : 显示当前所在的目录路径。</p>
<p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p>
<p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p>
<p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p>
<p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p>
<p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！</span><br></pre></td></tr></table></figure>

<p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p>
<p>10）、reset 重新初始化终端&#x2F;清屏。</p>
<p>11）、clear 清屏。</p>
<p>12）、history 查看命令历史。</p>
<p>13）、help 帮助。</p>
<p>14）、exit 退出。</p>
<p>15）、#表示注释</p>
<blockquote>
<p>Git配置</p>
</blockquote>
<p>所有的配置文件，其实都保存在本地</p>
<p>查看配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>

<p>![image-20230706153408392](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706153408392.png)</p>
<p>查看不同级别的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看系统config</span></span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line"><span class="comment">#查看当前用户（global）配置</span></span><br><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure>

<p><strong>Git相关的配置文件：</strong></p>
<p>1）、Git\etc\gitconfig  ：Git 安装目录下的 gitconfig   –system 系统级</p>
<p>2）、C:\Users\Administrator\ .gitconfig   只适用于当前登录用户的配置  –global 全局</p>
<p>注：也可以在配置文件里直接修改。</p>
<blockquote>
<p>设置用户名与邮箱（用户标识，必要）</p>
</blockquote>
<p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;kuangshen&quot;</span>  <span class="comment">#名称</span></span><br><span class="line">git config --global user.email 24736743@qq.com   <span class="comment">#邮箱</span></span><br></pre></td></tr></table></figure>

<p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p>
<p>![image-20230706153659180](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706153659180.png)</p>
<h2 id="四、Git基本理论"><a href="#四、Git基本理论" class="headerlink" title="四、Git基本理论"></a>四、Git基本理论</h2><blockquote>
<p>三个区域</p>
</blockquote>
<p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>
<p>![image-20230706153740300](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706153740300.png)</p>
<ul>
<li>Workspace：工作区，就是你平时存放项目代码的地方</li>
<li>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>
<p>![image-20230706153816936](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706153816936.png)</p>
<ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>
<li>Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>
<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态。</li>
</ul>
<blockquote>
<p>工作流程</p>
</blockquote>
<p>git的工作流程一般是这样的：</p>
<p>１、在工作目录中添加、修改文件；</p>
<p>２、将需要进行版本管理的文件放入暂存区域；</p>
<p>３、将暂存区域的文件提交到git仓库。</p>
<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>
<p>![image-20230706153910018](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706153910018.png)</p>
<h2 id="五、Git项目搭建"><a href="#五、Git项目搭建" class="headerlink" title="五、Git项目搭建"></a>五、Git项目搭建</h2><blockquote>
<p>创建工作目录与常用指令</p>
</blockquote>
<p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>
<p>日常使用只要记住下图6个命令：</p>
<p>![image-20230706154008795](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706154008795.png)</p>
<blockquote>
<p>本地仓库</p>
</blockquote>
<p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p>
<p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p>
<blockquote>
<p>克隆远程仓库</p>
</blockquote>
<p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]  <span class="comment"># https://gitee.com/kuangstudy/openclass.git</span></span><br></pre></td></tr></table></figure>

<p>2、去 gitee 或者 github 上克隆一个测试！</p>
<h2 id="六、Git文件操作"><a href="#六、Git文件操作" class="headerlink" title="六、Git文件操作"></a>六、Git文件操作</h2><blockquote>
<p>文件的四种状态</p>
</blockquote>
<p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<blockquote>
<p>查看文件状态</p>
</blockquote>
<p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># git add .                  添加所有文件到暂存区</span></span><br><span class="line"><span class="comment"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>忽略文件</p>
</blockquote>
<p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>
<ol>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt        <span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class="line">!lib.txt     <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="七、使用码云Gitee"><a href="#七、使用码云Gitee" class="headerlink" title="七、使用码云Gitee"></a>七、使用码云Gitee</h2><blockquote>
<p>github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器</p>
</blockquote>
<p>这个其实可以作为大家未来找工作的一个重要信息！</p>
<p>1、注册登录码云，完善个人信息</p>
<p>2、设置本机绑定SSH公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 C:\Users\Administrator\.ssh 目录</span></span><br><span class="line"><span class="comment"># 生成公钥</span></span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p>3、将公钥信息public key 添加到码云账户中即可！</p>
<p>4、使用码云创建一个自己的仓库！</p>
<p>许可证：开源是否可以随意转载，开源但是不能商业使用，不能转载，…  限制！</p>
<h2 id="八、IDEA中集成Git"><a href="#八、IDEA中集成Git" class="headerlink" title="八、IDEA中集成Git"></a>八、IDEA中集成Git</h2><p>1、新建项目，绑定git。</p>
<p>2、修改文件，使用IDEA操作git。</p>
<ul>
<li>添加到暂存区</li>
<li>commit 提交</li>
<li>push到远程仓库</li>
</ul>
<p>3、提交测试</p>
<h2 id="九、说明：GIt分支"><a href="#九、说明：GIt分支" class="headerlink" title="九、说明：GIt分支"></a>九、说明：GIt分支</h2><p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p>
<p>![image-20230706154634230](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706154634230.png)</p>
<p>![image-20230706154659704](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706154659704.png)</p>
<p>git分支中常用指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>

<p>IDEA中操作</p>
<p>![image-20230706155024799](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\Git的使用\image-20230706155024799.png)</p>
<p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p>
<p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>
<h2 id="十、Sourcetree-使用教程"><a href="#十、Sourcetree-使用教程" class="headerlink" title="十、Sourcetree 使用教程"></a>十、Sourcetree 使用教程</h2><p>Git 有很多图形界面工具 ( GUI )，比如 SourceTree、Github Desktop、TortoiseGit 等。</p>
<p>SourceTree 是一个 Git 客户端管理工具，适用于 Windows 和 Mac 系统。</p>
<p>SourceTree 简化了开发者与代码仓库之间的 Git 操作方式，我们可以通过界面菜单很方便的处理 Git 操作，而不需要通过命令。</p>
<p>通过 SourceTree，我们可以管理所有的 Git 库，无论是远程还是本地的。SourceTree 支持 Bitbucket、GitHub 以及 Gitlab 等远程仓库。</p>
<p>Sourcetree 官网 <a href="https://www.sourcetreeapp.com/">https://www.sourcetreeapp.com/</a> 直接点击下载按钮来下载。</p>
<p>其他版本可以查看：<a href="https://www.sourcetreeapp.com/download-archives">https://www.sourcetreeapp.com/download-archives</a></p>
<p>下载完成后，解压 ZIP 文件，双击应用程序文件（Windows 为 EXE 或 Mac 为 DMG）进行安装。</p>
<p>安装过程中，我们只需要同意 Atlassian 客户协议并点击 Continue 即可。</p>
<h2 id="十一、其他知识"><a href="#十一、其他知识" class="headerlink" title="十一、其他知识"></a>十一、其他知识</h2><p>Git学习：<a href="https://oschina.gitee.io/learn-git-branching/">Learn Git Branching (gitee.io)</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>拉取项目，并上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone 项目地址</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status  //查看状态</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &#x27;第一次提交&#x27;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5学习</title>
    <url>/2023/06/14/PyQt5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PyQt5学习"><a href="#PyQt5学习" class="headerlink" title="PyQt5学习"></a>PyQt5学习</h1><h2 id="一、PyQt5安装"><a href="#一、PyQt5安装" class="headerlink" title="一、PyQt5安装"></a>一、PyQt5安装</h2><h2 id="1-PyQt5-是-Digia的一套-Qt5-应用框架与-python-的结合，同时支持-python2-x和-python3-x。"><a href="#1-PyQt5-是-Digia的一套-Qt5-应用框架与-python-的结合，同时支持-python2-x和-python3-x。" class="headerlink" title="1.PyQt5 是 Digia的一套 Qt5 应用框架与 python 的结合，同时支持 python2.x和 python3.x。"></a>1.<code>PyQt5</code> 是 <code>Digia</code>的一套 <code>Qt5</code> 应用框架与 <code>python</code> 的结合，同时支持 <code>python2.x和 python3.x</code>。</h2><h2 id="2-这里使用的是Python-3-x。Qt库由-Riverbank-Computing开发，是最强大的GUI库之一-。"><a href="#2-这里使用的是Python-3-x。Qt库由-Riverbank-Computing开发，是最强大的GUI库之一-。" class="headerlink" title="2.这里使用的是Python 3.x。Qt库由 Riverbank Computing开发，是最强大的GUI库之一 。"></a>2.这里使用的是<code>Python 3.x</code>。<code>Qt</code>库由 <code>Riverbank Computing</code>开发，是最强大的<code>GUI</code>库之一 。</h2><h2 id="3、PyQt5-是由一系列-Python-模块组成。超过-620-个类，6000-函数和方法。能在诸如-Unix、Windows-和Mac-OS-等主流操作系统上运行。PyQt5-有两种证书，GPL和-商业证书。"><a href="#3、PyQt5-是由一系列-Python-模块组成。超过-620-个类，6000-函数和方法。能在诸如-Unix、Windows-和Mac-OS-等主流操作系统上运行。PyQt5-有两种证书，GPL和-商业证书。" class="headerlink" title="3、PyQt5 是由一系列 Python 模块组成。超过 620 个类，6000 函数和方法。能在诸如 Unix、Windows 和Mac OS 等主流操作系统上运行。PyQt5 有两种证书，GPL和 商业证书。"></a>3、<code>PyQt5</code> 是由一系列 <code>Python</code> 模块组成。超过 <code>620</code> 个类，<code>6000</code> 函数和方法。能在诸如 <code>Unix</code>、<code>Windows</code> 和<code>Mac OS</code> 等主流操作系统上运行。<code>PyQt5</code> 有两种证书，<code>GPL</code>和 商业证书。</h2><h2 id="4、PyQt5官方网址"><a href="#4、PyQt5官方网址" class="headerlink" title="4、PyQt5官方网址"></a>4、PyQt5官方网址</h2><p><a href="https://pypi.org/project/PyQt5/">https://pypi.org/project/PyQt5/</a></p>
<p>[]: <a href="https://www.qt.io/zh-cn/qt-for-python">https://www.qt.io/zh-cn/qt-for-python</a></p>
<h2 id="5、安装PyQt5"><a href="#5、安装PyQt5" class="headerlink" title="5、安装PyQt5"></a>5、安装PyQt5</h2><p><code>PyQt5</code> 有两种安装方式，一种是从官网下载源码安装，另外一种是使用 <code>pip</code> 安装。</p>
<p>推荐大家使用<code>pip</code> 安装。因为它会自动根据你的Python 版本来选择合适的 <code>PyQt5</code> 版本，如果是手动下载源码安装，难免会选择出错。建议使用比较稳妥的安装方式。</p>
<p>自己：使用pip安装，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install PyQt5 </span><br></pre></td></tr></table></figure>

<p>如果你的网络访问外网不是很好的话建议使用豆瓣的镜像下载，不然会很很慢或者直接安装失败。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install PyQt5 -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>

<h2 id="6、安装-PyQt5-tools"><a href="#6、安装-PyQt5-tools" class="headerlink" title="6、安装 PyQt5-tools"></a>6、安装 PyQt5-tools</h2><p><code>PyQt5</code> 不再提供常用Qt工具，比如图形界面开发工具Qt Designer、国际化翻译工具Liguist 如果开发中使用到这些，必须自行安装Qt工具。</p>
<p>这里我们还是采用脚本安装的方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install PyQt5-tools</span><br></pre></td></tr></table></figure>

<p>使用镜像下载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install PyQt5-tools -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>

<p><code>PyQt5</code> 版本的不同，安装成功之后，PyQt5 相关文件夹以及目录也会存在一些差异。</p>
<p><code>PyQt 5.15.x</code> 之前的版本：</p>
<p>安装完成后在 <code>%Python_path%\Lib\site-packages</code>目录中可以看到<code>PyQt5</code>、<code>pyqt5-tools</code>、<code>PyQt5-sip</code> 目录</p>
<p><code>PyQt 5.15.x</code> 以及之后的版本：</p>
<p>安装完成后在 <code>%Python_path%\Lib\site-packages</code> 目录中可以看到 <code>PyQt5</code>、<code>pyqt5-tools</code>、<code>PyQt5-sip</code> 、以及多了的 <code>qt_applications</code> <code>qt5-tools</code> 目录。</p>
<h2 id="7、设置环境变量"><a href="#7、设置环境变量" class="headerlink" title="7、设置环境变量"></a>7、设置环境变量</h2><p>在桌面上右键单击“我的电脑”，在弹出的快捷菜单中选择“属性”-&gt;“高级系统设置”-&gt;“高级”，单击环境变量按钮，在系统变量Path中添加pyqt5-tools目录的绝对路径。</p>
<p>在 <code>Windows</code> 命令行输入 <code>echo %Path%</code> 命令。如果一切正常，则会在返回的 <code>Path</code> 路径中看到刚才配置的路径。</p>
<h2 id="8、QT-Designer"><a href="#8、QT-Designer" class="headerlink" title="8、QT Designer"></a>8、QT Designer</h2><p><code>window</code> 平台， <code>PyQt-tools</code> 默认安装 <code>QT Designer.exe</code>。</p>
<p><code>PyQt 5.15.x</code> 之前的版本：</p>
<p>路径在<code>%Python_path%\Lib\site-packages|pyqt5_tools\Qt\bin\desginer.exe</code></p>
<p><code>PyQt 5.15.x</code> 以及之后的版本：</p>
<p>路径在 <code>%Python_path%\Lib\site-packages\qt5_applications\Qt\bin\designer.exe</code></p>
<p>双击 <code>designer.exe</code> 打开之后可以直接使用。</p>
<h2 id="9、关于-QT"><a href="#9、关于-QT" class="headerlink" title="9、关于 QT"></a>9、关于 QT</h2><p><code>QT SDK</code> 包括<code>Qt</code>库、<code>Qt Creator IDE</code> 和<code>Qt-tools</code>，这些都集成在一个易于安装的文件包里。</p>
<p><code>Qt Creator</code> 用户是不需要单独的 <code>Qt Designer</code> 程序，但是还有很多<code>Qt</code>的用户，他们是不使用<code>Qt Creator</code>的，此时编辑 <code>ui</code>文件的话，只能用 <code>Qt Designer</code>了。</p>
<p>网上说安装PyQt5要先安装sip，就是pip install sip -i</p>
<p>[]: <a href="http://link.zhihu.com/?target=https://pypi.tuna.tsinghua.edu.cn/simple">http://link.zhihu.com/?target=https%3A//pypi.tuna.tsinghua.edu.cn/simple</a></p>
<h2 id="10、熟悉Qt-设计师（Qt-Designer）"><a href="#10、熟悉Qt-设计师（Qt-Designer）" class="headerlink" title="10、熟悉Qt 设计师（Qt Designer）"></a>10、熟悉Qt 设计师（Qt Designer）</h2><p><img src="/2023/06/14/PyQt5%E5%AD%A6%E4%B9%A0/image-20231031174257188.png" alt="image-20231031174257188"></p>
<p><img src="/2023/06/14/PyQt5%E5%AD%A6%E4%B9%A0/image-20231031174320657.png" alt="image-20231031174320657"></p>
<p><img src="/2023/06/14/PyQt5%E5%AD%A6%E4%B9%A0/image-20231031174343735.png" alt="image-20231031174343735"></p>
<h2 id="项目构建："><a href="#项目构建：" class="headerlink" title="项目构建："></a>项目构建：</h2><ol>
<li>架构的构建（需求文档）</li>
<li>设计图出稿</li>
<li>设计图复原（designer）</li>
<li>编写核心代码</li>
</ol>
]]></content>
      <categories>
        <category>工具学习</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>Qt Designer</tag>
      </tags>
  </entry>
  <entry>
    <title>beauty</title>
    <url>/2023/11/06/beauty/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/24/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h3 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h3><h4 id="我想要的很简单：兜里有糖，肚里有墨，手里有活，卡里有钱，未来有你。"><a href="#我想要的很简单：兜里有糖，肚里有墨，手里有活，卡里有钱，未来有你。" class="headerlink" title="我想要的很简单：兜里有糖，肚里有墨，手里有活，卡里有钱，未来有你。"></a>我想要的很简单：兜里有糖，肚里有墨，手里有活，卡里有钱，未来有你。</h4>]]></content>
  </entry>
  <entry>
    <title>hexo博客中next添加背景图片</title>
    <url>/2023/06/24/hexo%E5%8D%9A%E5%AE%A2%E4%B8%ADnext%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo博客中next添加背景图片"><a href="#hexo博客中next添加背景图片" class="headerlink" title="hexo博客中next添加背景图片"></a>hexo博客中next添加背景图片</h1><h3 id="1、-设置背景图片"><a href="#1、-设置背景图片" class="headerlink" title="1、 设置背景图片"></a>1、 设置背景图片</h3><p>将想要的背景图片命名为background.jpg放入 themes&#x2F;next&#x2F;source&#x2F;images中</p>
<h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p><img src="/2023/06/24/hexo%E5%8D%9A%E5%AE%A2%E4%B8%ADnext%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/1.png" alt="修改"></p>
<blockquote>
<p>我看网上很多在styles.styl中配置，然后取消注解，出现错误。新建&#x2F;_data&#x2F;styles.styl,也不行。</p>
</blockquote>
<h3 id="2、新建文件夹配置"><a href="#2、新建文件夹配置" class="headerlink" title="2、新建文件夹配置"></a>2、新建文件夹配置</h3><p>在<code>themes/next/source/</code>下使用如下命令新建一个<code>_data</code>的文件夹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir _data</span><br></pre></td></tr></table></figure>

<p>然后新建一个<code>styles.styl</code>文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background:url(/images/background.jpg); // 设定背景图片,images同处于source文件夹下</span><br><span class="line">    background-repeat: no-repeat; // 设定背景图片非重复填充</span><br><span class="line">    background-attachment:fixed; // 设置背景图片不随页面滚动</span><br><span class="line">    background-position:50% 50%; // 设置背景图片位置</span><br><span class="line">    // background-size: 100% 100%; // 设置保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小</span><br><span class="line">    background-size: cover;</span><br><span class="line">    -webkit-background-size: cover;</span><br><span class="line">    -o-background-size: cover;</span><br><span class="line">    -moz-background-size: cover;</span><br><span class="line">    -ms-background-size: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将<code>themes/next/_config.yml</code>配置文<code>custom_file_path:</code>下的<code>#style: source/_data/styles.styl</code>#号去掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.swig</span><br><span class="line">  #header: source/_data/header.swig</span><br><span class="line">  #sidebar: source/_data/sidebar.swig</span><br><span class="line">  #postMeta: source/_data/post-meta.swig</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.swig</span><br><span class="line">  #footer: source/_data/footer.swig</span><br><span class="line">  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  style: source/_data/styles.styl  //更改</span><br></pre></td></tr></table></figure>

<p>改完之后就会出现我上面的问题：</p>
<p><img src="/2023/06/24/hexo%E5%8D%9A%E5%AE%A2%E4%B8%ADnext%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/2.png" alt="question"></p>
<p>可以看出是CSS中问题，所以需要<code>/themes/next/source/css</code>下找到<code>main.styl</code>文件，并在最后一行添上如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Custom Layer</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">for $inject_style in hexo-config(&#x27;injects.style&#x27;)</span><br><span class="line">  @import &#x27;../_data/styles.styl&#x27;;</span><br></pre></td></tr></table></figure>

<p>然后执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo</span><br></pre></td></tr></table></figure>

<p>之后更换成功了，或许你可能不会碰到这个问题。</p>
<h3 id="三、另一种方式："><a href="#三、另一种方式：" class="headerlink" title="三、另一种方式："></a>三、另一种方式：</h3><p>hexo（hexo工程文件）-&gt; themes -&gt; next -&gt; source -&gt; css -&gt;main.styl ，找到路径下的main.styl文件，在文件的最上方加上一代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background:url(/images/2.jpg);</span><br><span class="line">  background-repeat: repeat;</span><br><span class="line">  background-attachment fixed;</span><br><span class="line">  background-size cover;</span><br><span class="line">  background-position:100% 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一样也行。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客问题</title>
    <url>/2023/10/31/hexo%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo博客问题"><a href="#hexo博客问题" class="headerlink" title="hexo博客问题"></a>hexo博客问题</h1><h2 id="1、长时间未使用会出现报错-bash-hexo-command-not-found问题"><a href="#1、长时间未使用会出现报错-bash-hexo-command-not-found问题" class="headerlink" title="1、长时间未使用会出现报错 bash: hexo: command not found问题"></a>1、长时间未使用会出现报错 bash: hexo: command not found问题</h2><ol>
<li>检查node和npm是否正常</li>
<li>重新配置环境变量</li>
<li>博客文件中的环境变量重新配置</li>
<li>配置好后hexo clean —hexo  g—–hexo  deploy</li>
<li>实在不行重新安装hexo</li>
</ol>
<h2 id="2、hexo博客部署到GitHub上，博客网页没有更新，hexo-server正常"><a href="#2、hexo博客部署到GitHub上，博客网页没有更新，hexo-server正常" class="headerlink" title="2、hexo博客部署到GitHub上，博客网页没有更新，hexo server正常"></a>2、hexo博客部署到GitHub上，博客网页没有更新，hexo server正常</h2><ol>
<li><p>进入GitHub查看有没有成功更新，网络延迟问题</p>
</li>
<li><p>查看项目的分支是main还是master，并且自己博客文件是提交到哪个分支</p>
</li>
<li><p>进入GitHub提交分支界面合并分支</p>
</li>
<li><p>就可以查看更新了</p>
<p><img src="/2023/10/31/hexo%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98/image-20231031171928721.png" alt="image-20231031171928721"></p>
</li>
</ol>
<h2 id="3、hexo博客无法显示图片问题，在网页和本地都无法显示"><a href="#3、hexo博客无法显示图片问题，在网页和本地都无法显示" class="headerlink" title="3、hexo博客无法显示图片问题，在网页和本地都无法显示"></a>3、hexo博客无法显示图片问题，在网页和本地都无法显示</h2><ol>
<li><p>安装插件hexo-asset-image</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">npm</span> install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改图片路径</p>
<p><img src="/2023/10/31/hexo%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98/image-20231031173343986.png" alt="image-20231031173343986"></p>
</li>
</ol>
<blockquote>
<p>注意图片路径中的是反斜杠  &#x2F;   ，如果之前的是 \斜杠会出现图片无法加载问题</p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
        <category>Question</category>
      </categories>
      <tags>
        <tag>Question</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo命令</title>
    <url>/2023/09/05/hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h1><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$ hexo clean   //清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br></pre></td></tr></table></figure>

<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo generate  //生成静态文件。</span><br></pre></td></tr></table></figure>



<h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo deploy  //部署网站。</span><br></pre></td></tr></table></figure>



<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo server   //启动服务器</span><br></pre></td></tr></table></figure>

<p>默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo version   //显示 Hexo 版本。</span><br></pre></td></tr></table></figure>



<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;   //列出网站资料。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法学习</title>
    <url>/2023/09/05/markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="markdown语法学习"><a href="#markdown语法学习" class="headerlink" title="markdown语法学习"></a>markdown语法学习</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><blockquote>
<p>标题      #+空格+标题    一级标题，依次类推</p>
</blockquote>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><blockquote>
<p>字体    粗体：  <strong>字体</strong>      斜体 ：   <em>字体</em>    斜体加粗   前后个***</p>
<p>删除线：两边加~~</p>
</blockquote>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>引用：&gt;加</p>
</blockquote>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><blockquote>
<p>分割线：—    或***</p>
</blockquote>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><blockquote>
<p>图片：   ！[图片名]（路径）</p>
</blockquote>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><blockquote>
<p>超链接：[点击跳转]（地址）</p>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><blockquote>
<p>1.空格     有序列表</p>
<ul>
<li>​       无序列表       -+空格</li>
</ul>
</blockquote>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>![image-20230707111754929](C:\Users\阿伟的Computer\Desktop\桌面\Typora data\开发工具学习\markdown语法学习\image-20230707111754929.png)</p>
<p>启动源代码删除空格或直接右键插入</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>tab键上三个点</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ctrl+shift+k  快捷键</span><br></pre></td></tr></table></figure>

<h2 id="额外：Git-bash快捷键"><a href="#额外：Git-bash快捷键" class="headerlink" title="额外：Git bash快捷键"></a>额外：Git bash快捷键</h2><blockquote>
<p>复制: ctrl + insert</p>
</blockquote>
<blockquote>
<p>粘贴: shift + insert</p>
</blockquote>
]]></content>
      <categories>
        <category>工具学习</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>文本编辑</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo新建页面</title>
    <url>/2023/06/25/hexo%E6%96%B0%E5%BB%BA%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo新建"><a href="#hexo新建" class="headerlink" title="hexo新建"></a>hexo新建</h1><h2 id="一、hexo新建标签、分类、归档页面，步骤都是类似的："><a href="#一、hexo新建标签、分类、归档页面，步骤都是类似的：" class="headerlink" title="一、hexo新建标签、分类、归档页面，步骤都是类似的："></a>一、<a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>新建标签、分类、归档页面，步骤都是类似的：</h2><ol>
<li><p>新建页面</p>
</li>
<li><p>设置页面的类型</p>
</li>
<li><p>打开主题中的相关设置</p>
</li>
</ol>
<p>几个主要的新建页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>比如新建标签页：</p>
<ol>
<li>用命令行新建一个页面：（页面名称可以任意）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tages&quot; </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开 <strong>&#x2F;source&#x2F;tages&#x2F;index.md</strong>，设置其类型 type 值为“tages”</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: <span class="number">2019</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">00</span>:<span class="number">33</span>:<span class="number">58</span></span><br><span class="line">type: <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>打开 <strong>&#x2F;themes&#x2F;主题&#x2F;_config.yml</strong>，把tages标签那项取消注释即可，下面的是已经取消注释了的。</p>
<p><img src="/2023/06/25/hexo%E6%96%B0%E5%BB%BA%E9%A1%B5%E9%9D%A2/1.png" alt="验证"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础（一）</title>
    <url>/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、注释"><a href="#一、注释" class="headerlink" title="一、注释"></a>一、注释</h2><p>作用：使用自己熟悉的语言，在程序中对某些代码进行标注说明，增强程序的可读性。</p>
<p><strong>1.单行注释</strong></p>
<blockquote>
<p>#（可空格）注释内容  <strong>注：为了代码的可读性建议#后加个空格</strong></p>
</blockquote>
<p><strong>在代码后面增加单行注释</strong>   <strong>在代码与注释之间至少有两个空格</strong></p>
<p><strong>2.多行注释</strong></p>
<p><strong>‘’‘’‘’</strong></p>
<p><strong>‘’‘’‘’</strong></p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20230918212717905.png" alt="image-20230918212717905"></p>
<p>3、中文编码声明注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果要指定字符编码类型为中文编码，需要在文件开头加上中文声明注释，不至于出现代码错误</span></span><br><span class="line"><span class="comment"># coding = 编码</span></span><br><span class="line"><span class="comment"># coding = utf-8</span></span><br></pre></td></tr></table></figure>

<h2 id="二、保留字（关键字）与标识符"><a href="#二、保留字（关键字）与标识符" class="headerlink" title="二、保留字（关键字）与标识符"></a>二、保留字（关键字）与标识符</h2><blockquote>
<p>保留字是python语言中已经被赋予特定意义的一些单词，所有保留字都是区分字母大小写的</p>
</blockquote>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20231030171312652.png" alt="image-20231030171312652"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">keyword.kwlist</span><br></pre></td></tr></table></figure>

<p>可以通过<strong>命令</strong>查看关键字：  import关键字可以导入一个工具包</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20231030171354823.png" alt="image-20231030171354823"></p>
<p>标识符可以理解一个名字，它主要用来标识变量、函数、类、模块和其他对象名称<strong>（起名字要见名知义）</strong></p>
<ul>
<li>由字母、下划线和数字组成，首字母不能是数字</li>
<li>不能使用python保留字</li>
<li>区分大小写</li>
</ul>
<p>变量的命名规范：</p>
<ul>
<li>见名知意</li>
<li>下划线命名法</li>
<li>英文字母全小写</li>
</ul>
<h2 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h2><p><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></p>
<blockquote>
<p>变量名：通常用字母、数字、和下划线构成，不能以数字开头，并且区分打大小写</p>
<p>python3支持中文，也可以做为变量名</p>
<p>变量的格式：变量名 &#x3D; 变量值</p>
</blockquote>
<h3 id="1、变量的定义与命名"><a href="#1、变量的定义与命名" class="headerlink" title="1、变量的定义与命名"></a>1、变量的定义与命名</h3><ul>
<li>在python中每个变量在使用前必须赋值，变量赋值以后该变量才会被创建</li>
<li>等号（&#x3D;）用来给变量赋值</li>
</ul>
<p><strong>变量的命名规则</strong></p>
<p>命名规则可以被视为一种惯例，并无绝对与强制，目的是为了增加代码的识别和可读性。</p>
<ol>
<li><p>在定义变量时，为了保证代码格式，“**&#x3D;**”的左右应该各保留一个空格</p>
</li>
<li><p>在Python中，如果变量名需要由<strong>二个或多个单词组成</strong>时，可以按照以下方式命名</p>
</li>
</ol>
<ul>
<li>每个单词都使用<strong>小写字母</strong>，</li>
<li>单词与单词之间使用**_**<strong>下划线连接</strong></li>
<li>例如：first_name、last_name、qq_number、qq_password</li>
</ul>
<hr>
<p><strong>驼峰命名法</strong></p>
<p>当变量名是由二个或多个单词组成时，还可以利用驼峰命名法来命名</p>
<p><strong>小驼峰式命名法</strong></p>
<p>   第一个单词以小写字母开始，后续单词的首字母大写</p>
<p>   例如：firstName、lastlame</p>
<p><strong>大驼峰式命名法</strong></p>
<p>  每一个单词的首字母都采用大写字母</p>
<p>   例如：FirstName、LastName、</p>
<hr>
<p>变量之间的交换可以用这个：</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20230919194043392.png" alt="image-20230919194043392"></p>
<h3 id="2、变量的类型"><a href="#2、变量的类型" class="headerlink" title="2、变量的类型"></a>2、变量的类型</h3><p>四种：</p>
<ul>
<li>str        字符串</li>
<li>bool     布尔（真假）</li>
<li>int    整型</li>
<li>float   浮点数（小数）</li>
</ul>
<p><strong>注：python</strong>中定义变量时不需指定类型，python可以根据&#x3D;等号右侧的值，自动推导出变量中存储数据类型。（其他语言需要）</p>
<blockquote>
<p>使用内置函数type()可以返回变量类型</p>
</blockquote>
<h3 id="3、变量的格式化输出"><a href="#3、变量的格式化输出" class="headerlink" title="3、变量的格式化输出"></a>3、变量的格式化输出</h3><p>如果希望输出文字信息同时，一起输出数据，就需要使用到格式化操作符。</p>
<p>%被称为格式化操作符，专门用于处理字符串的格式。</p>
<ul>
<li>包含%的字符串，被称为格式化字符串</li>
<li>%和不同的字符连用，不同类型的数据需要使用不同的格式化字符</li>
</ul>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20231030171513124.png" alt="image-20231030171513124"></p>
<p>语法格式：</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20230918213946647.png" alt="image-20230918213946647"></p>
<h2 id="四、基本数据类型"><a href="#四、基本数据类型" class="headerlink" title="四、基本数据类型"></a>四、基本数据类型</h2><p>数据类型可以分为<strong>数字型</strong>和<strong>非数字型</strong></p>
<h3 id="1、数字类型"><a href="#1、数字类型" class="headerlink" title="1、数字类型"></a>1、数字类型</h3><ul>
<li><p>整数</p>
</li>
<li><p>浮点数</p>
<blockquote>
<p>精确计算浮点数：decimal模块</p>
</blockquote>
</li>
<li><p>复数</p>
<blockquote>
<p>由实部和虚部组成，并且使用J和j表示虚部</p>
</blockquote>
</li>
</ul>
<h3 id="2、字符串类型"><a href="#2、字符串类型" class="headerlink" title="2、字符串类型"></a>2、字符串类型</h3><h3 id="3、布尔类型"><a href="#3、布尔类型" class="headerlink" title="3、布尔类型"></a>3、布尔类型</h3><p>布尔类型主要来表示真或假的值，在python中True   和   False被解释为布尔值</p>
<p>在python中所有对象都可以进行真值测试，只有以下几种得到的值为假：</p>
<ul>
<li>False或None</li>
<li>数值中的零。包括0、0.0、虚数0</li>
<li>空序列，包括字符串、空元组、空列表、空字典</li>
<li>自定义对象实例，对象的____bool____方法返回False或者_len_方法返回0</li>
</ul>
<p>变量是bool型，在计算时</p>
<p>True对应的数字是1</p>
<p>False对应的数字是0</p>
<blockquote>
<p>使用bool（）内置函数直接给出True和False</p>
<p>使用type () 查看数据的类型，并且返回结果</p>
<p>变量无类型，但是它存储的数据有</p>
</blockquote>
<h3 id="4、数据类型的转换"><a href="#4、数据类型的转换" class="headerlink" title="4、数据类型的转换"></a>4、数据类型的转换</h3><table>
<thead>
<tr>
<th>语句（函数）</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int(x)</td>
<td>将x转换为整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转换为浮点数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象x转换为字符串</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>任何类型都可转换为字符串</li>
<li>字符串不可以随意转换为数字，必须为数字</li>
<li>浮点数转换为整数会丢失精度</li>
</ul>
<h2 id="五、运算符"><a href="#五、运算符" class="headerlink" title="五、运算符"></a>五、运算符</h2><h3 id="1、算数运算符"><a href="#1、算数运算符" class="headerlink" title="1、算数运算符"></a>1、算数运算符</h3><p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20231030171619978.png" alt="image-20231030171619978"></p>
<p>如：”hello” * 100</p>
<p><strong>优先级：</strong></p>
<p>先乘除后加减</p>
<p>同级运算符是从左至右计算</p>
<p>可以使用（）调整计算的优先级</p>
<h3 id="2、赋值运算符"><a href="#2、赋值运算符" class="headerlink" title="2、赋值运算符"></a>2、赋值运算符</h3><p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20231030171644917.png" alt="image-20231030171644917"></p>
<p>在python中，使用 &#x3D; 可以给变量赋值</p>
<p>注：赋值运算符中间不能使用空格</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20230918215008367.png" alt="image-20230918215008367"></p>
<h3 id="3、比较（关系）运算符"><a href="#3、比较（关系）运算符" class="headerlink" title="3、比较（关系）运算符"></a>3、比较（关系）运算符</h3><blockquote>
<p>通过比较的运算符得到的都是布尔类型 </p>
</blockquote>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20230918213052509.png" alt="image-20230918213052509"></p>
<h3 id="4、逻辑运算符"><a href="#4、逻辑运算符" class="headerlink" title="4、逻辑运算符"></a>4、逻辑运算符</h3><p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20231030171724480.png" alt="image-20231030171724480">&gt;</p>
<p><strong>一、and</strong></p>
<p><strong>语法：</strong></p>
<p>条件一 and 条件二</p>
<ul>
<li>与 并且</li>
<li>两个条件同时满足，返回True</li>
<li>只要有一个不满足，就返回Flase</li>
</ul>
<p><strong>二、or</strong></p>
<p><strong>语法：</strong></p>
<p>条件一  or 条件二</p>
<ul>
<li>或 或者</li>
<li>两个条件只要有一个满足，返回True</li>
<li>两个条件都不满足，返回Flase</li>
</ul>
<p><strong>三、not</strong></p>
<p><strong>语法：</strong></p>
<p>Not 条件</p>
<ul>
<li>非  不是</li>
</ul>
<h3 id="5、运算符优先级"><a href="#5、运算符优先级" class="headerlink" title="5、运算符优先级"></a>5、运算符优先级</h3><p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/image-20231030171747555.png" alt="image-20231030171747555"></p>
<h2 id="六、数据的输入和输出"><a href="#六、数据的输入和输出" class="headerlink" title="六、数据的输入和输出"></a>六、数据的输入和输出</h2><ol>
<li>使用print（）函数输出</li>
<li>使用input（）函数输入</li>
</ol>
<blockquote>
<p>注意：无论键盘输入什么类型的数据，获取的数据永远都是字符串类型</p>
</blockquote>
<h2 id="七、随机数的处理"><a href="#七、随机数的处理" class="headerlink" title="七、随机数的处理"></a>七、随机数的处理</h2><p>在Python中，要使用随机数，首先需要导入随机数的模块–”工具包”</p>
<p><strong>Import   random</strong></p>
<p><strong>导入模块</strong>后，可以直接在<strong>模块名称</strong>后面敲一个。然后按Tab键，会提示该模块中包含的所有函数</p>
<p><strong>Random.r andint(a,b),返回[a,b]之间的整数，包含a和b</strong></p>
<p><strong>前面一个整数必须小于后面一个整数</strong></p>
]]></content>
      <categories>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础（三）</title>
    <url>/2023/11/04/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、函数（1）"><a href="#一、函数（1）" class="headerlink" title="一、函数（1）"></a>一、函数（1）</h1><p>所谓<strong>函数</strong>，就是把<strong>具有独立功能的代码块</strong>组织为一个小模块。在需要的时候<strong>调用函数</strong>的使用包含两个步骤：</p>
<p>1.<strong>定义函数</strong>一一封装独立的功能</p>
<p>2.<strong>调用函数</strong>一一享受封装的成果</p>
<p>函数的作用，在开发程序时，使用函数可以提高写的效率以及代码的<strong>重用</strong></p>
<h3 id="1、定义函数"><a href="#1、定义函数" class="headerlink" title="1、定义函数"></a><strong>1、定义函数</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数的定义</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">传入参数</span>)：</span><br><span class="line">	函数体</span><br><span class="line">	<span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/04/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/image-20230918215201107.png" alt="image-20230918215201107"></p>
<blockquote>
<p>在函数中的参数和返回值不需要，都可省略</p>
</blockquote>
<h3 id="2、函数的调用"><a href="#2、函数的调用" class="headerlink" title="2、函数的调用"></a>2、函数的调用</h3><p>通过 <strong>函数名（）</strong> 即可完成对函数调用</p>
<p>问题：能否将函数调用放在函数定义的上方？</p>
<p>  不能！</p>
<ul>
<li>因为在使用函数名调用函数之前，必须要保证Python已经知道函数的存在</li>
<li>否则控制台会提示NaneError:name’say_hello’is     not defined(名称错误：say_helo这个名字没有被定义）</li>
</ul>
<blockquote>
<p>函数的嵌套调用：在一个函数里面调用另外一个函数</p>
</blockquote>
<h3 id="3、函数的参数"><a href="#3、函数的参数" class="headerlink" title="3、函数的参数"></a>3、函数的参数</h3><p>传入参数的功能：在函数计算的时候，接收外部（调用时)提供的数据</p>
<p><img src="/2023/11/04/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/image-20230918215250955.png" alt="image-20230918215250955"></p>
<blockquote>
<p>在函数中存在两种参数：形参和实参</p>
<p>传入的参数的数量不受限制，可以不使用，也可以使用多个</p>
<p>传入参数的时候要和形参一一对应，逗号隔开</p>
</blockquote>
<h3 id="4、参数的作用"><a href="#4、参数的作用" class="headerlink" title="4、参数的作用"></a>4、参数的作用</h3><p>函数的<strong>参数</strong>，增加函数的<strong>通用性</strong>，针对相同的数据处理逻辑。能够适应更多的数据</p>
<p>1.在函数<strong>内部</strong>，把参数当做<strong>变量</strong>使用，进行需要的<strong>数据处理</strong></p>
<p>2.函数调用时，按服函数定义的<strong>参数顺序</strong>。把希望在<strong>函数内部处理的数据</strong>，通过参数<strong>传递。</strong></p>
<h3 id="5、形参和实参"><a href="#5、形参和实参" class="headerlink" title="5、形参和实参"></a>5、形参和实参</h3><p><strong>形参</strong>：定义函数时，小括号中的参数，是用来接收参数用的，在函数内部作为变量使用</p>
<p><strong>实参</strong>：调用函数时，小括号中的参数，是用来把数据传递到函数内部用的</p>
<h3 id="6、函数的返回值"><a href="#6、函数的返回值" class="headerlink" title="6、函数的返回值"></a>6、函数的返回值</h3><p>1、返回值</p>
<p>在程序开发中，有时候，会希望<strong>一个函数执行结束后</strong>，告诉调用者一个结果，以便调用者针对具体的结果做后续的处理</p>
<p><strong>返回值</strong>是函数完成工作后，最后给调用者的一个<strong>结果</strong></p>
<p>在函数中使用<strong>return关键字</strong>可以返回结果</p>
<p>调用函数一方，可以使用变量来接收函数的返回结果</p>
<p>注意：return表示返回，后续的代码都不会被执行，并且return出现在函数什么位置，只要得到执行，将会直接结束函数的执行</p>
<p>2、None类型</p>
<p>&lt;class ‘NoneType’&gt;</p>
<p>无返回值的函数，实际就返回:None这个字面量，表示空的意思</p>
<p>作用场景：</p>
<p>1、用在函数无返回值上</p>
<p>2、用在if判断上None也等同于False</p>
<p>3、用于声明无内容的变量上</p>
<h3 id="7、函数的文档注释"><a href="#7、函数的文档注释" class="headerlink" title="7、函数的文档注释"></a><strong>7、函数的文档注释</strong></h3><ul>
<li>在开发中，如果希望给<strong>函数添加注释</strong>，应该在<strong>定义函数的下方</strong>，使用连续的<strong>三对引号</strong></li>
<li>在连续的<strong>三对引号之间编写对函数</strong>的说明文字</li>
<li>在函数调用位置，使用<strong>快捷键CL+Q</strong>可以查看图数的说明信息</li>
</ul>
<p>注意：<strong>因为函数体相对比较独立，函数定义的上方，应该和其他代码（包括注释）保留</strong></p>
<p><strong>两个空行</strong></p>
<p><img src="/2023/11/04/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/image-20231030205214556.png" alt="image-20231030205214556"></p>
<h3 id="8、函数的嵌套调用"><a href="#8、函数的嵌套调用" class="headerlink" title="8、函数的嵌套调用"></a>8、函数的嵌套调用</h3><p>一个函数里面又调用了另外一个函数，这就是<strong>函数嵌套调用</strong></p>
<p>如果函数test2中，调用了另外一个图数test1</p>
<p>  那么执行到调用test1函数时，会先把函数test1中的任务都执行完</p>
<p>  才会回到test2中调用函数test1的位置，继续执行后续的代码</p>
<h3 id="9、变量的作用域"><a href="#9、变量的作用域" class="headerlink" title="9、变量的作用域"></a>9、变量的作用域</h3><p>变量的作用域是指程序代码能够访问改变量的区域，如果超出该区域就会出现错误，在程序中，一般会根据变量的有效范围将变量分为全局变量和局部变量</p>
<p>1、局部变量</p>
<p>局部变量是指在程序内部定义并使用的变量，它只在函数内部有效，在函数外部使用函数内部定义的变量，就会抛出NameError异常。</p>
<p>作用：在函数体内部，临时保存数据，当函数调用完成后，则销毁局部变量</p>
<p>2、全局变量</p>
<p>全局变量为能够作用与函数内外的变量，主要有两种情况：</p>
<ol>
<li>如果一个变量在函数体外定义，那么不仅在函数外可以访问到，在函数内也可以访问到</li>
<li>如果一个变量在函数体内定义，并且使用global关键字修饰，该变量也就变为全局变量，在函数体外可以访问该变量，并且在函数体内还可以进行修改</li>
</ol>
<blockquote>
<p>内部修改外部函数作用域的值：使用nonlocal关键字</p>
<p>LEGB规则</p>
</blockquote>
<h3 id="10、PyCharm的调试工具"><a href="#10、PyCharm的调试工具" class="headerlink" title="10、PyCharm的调试工具**"></a>10、PyCharm的调试工具**</h3><p><strong>F8 Step Over</strong>可以单步执行代码，会把<strong>函数调用</strong>看作是一行代码直接执行</p>
<p><strong>F7 Step Into</strong>可以单步执行代码，如果是<strong>函数</strong>。会进入<strong>函数内部</strong></p>
<h3 id="11、使用模块中的函数"><a href="#11、使用模块中的函数" class="headerlink" title="11、使用模块中的函数"></a><strong>11、使用模块中的函数</strong></h3><p><strong>一、模块是python程序架构的一个核心概念</strong></p>
<p><strong>模块</strong>就好比是工具包<strong>，要想使用这个工具包中的工具，就需要导入</strong>import这个模块**</p>
<p>每一个以<strong>扩展名py</strong>结尾的Python源代码文件都是一个<strong>模块</strong></p>
<p>在模块中定义的<strong>全局变量、函数</strong>都是模块能够提供给外界直接使用的工具</p>
<p><strong>二、体验小结</strong></p>
<p>可以在 <strong>一个<strong><strong>Python</strong></strong>文件</strong> 中   <strong>定义变量或者函数</strong></p>
<p>然后在另外一个文件中使用 <strong>i****mport</strong>导入这个模块</p>
<p>导入之后，就可以使用<strong>模块名.变量</strong> &#x2F; <strong>模块名.函数</strong>的方式，使用这个模块中定义的<strong>变量或者函数</strong></p>
<p><strong>模块</strong>可以让<strong>曾经编写过的代码</strong>方便的被<strong>复用</strong>！</p>
<h3 id="12、模块名（文件名）也是一种标识符"><a href="#12、模块名（文件名）也是一种标识符" class="headerlink" title="12、模块名（文件名）也是一种标识符"></a><strong>12、模块名（文件名）也是一种标识符</strong></h3><p><strong>标示符</strong>可以由<strong>字母、下划线和数字</strong>组成</p>
<p>不能以数字开头</p>
<p>不能与关键字重名</p>
<p>注意：如果在给Python.文件起名时，以数字开头是无法在PyCharm中通过导入这个模</p>
<p>块的</p>
<h3 id="13、Pyc文件（了解）"><a href="#13、Pyc文件（了解）" class="headerlink" title="13、Pyc文件（了解）"></a><strong>13、Pyc文件（了解）</strong></h3><p><strong>C是</strong> <strong>compiled</strong> <strong>编译过的意思</strong></p>
<p><img src="/2023/11/04/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/image-20230918215355042.png" alt="image-20230918215355042"></p>
<h3 id="补充扩展"><a href="#补充扩展" class="headerlink" title="补充扩展"></a>补充扩展</h3><blockquote>
<p>Radom生成的随机数是可以被重现的</p>
</blockquote>
<p>默认情况下使用当前操作系统时间来作为随机数的种子，radom.getstate()获取随机数种子加工后随机数生成 的内部状态</p>
<p><img src="/2023/11/04/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/image-20230921213134552.png" alt="image-20230921213134552"></p>
<h1 id="二、函数（2）"><a href="#二、函数（2）" class="headerlink" title="二、函数（2）"></a>二、函数（2）</h1><h3 id="1、函数的多返回值"><a href="#1、函数的多返回值" class="headerlink" title="1、函数的多返回值"></a>1、函数的多返回值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">text_return</span>():</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">x,y,z = text_return()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br></pre></td></tr></table></figure>

<h3 id="2、函数多种传参方式"><a href="#2、函数多种传参方式" class="headerlink" title="2、函数多种传参方式"></a>2、函数多种传参方式</h3><ul>
<li>位置参数</li>
<li>关键字参数</li>
<li>不定长参数</li>
<li>缺省参数</li>
</ul>
<p>1、位置参数</p>
<p>位置参数也称为必备参数，必须按照正确的顺序传到函数中，即调用时的数量和位置必须和定义时一样</p>
<ul>
<li><p>数量必须与定义时一致</p>
</li>
<li><p>位置必须与定义时一致</p>
</li>
</ul>
<p>2、关键字参数</p>
<p>函数调用通过“键值对”形式传递参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>(<span class="params">name,age,gender</span>):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>,年龄：<span class="subst">&#123;age&#125;</span>岁，性别：<span class="subst">&#123;gender&#125;</span>&quot;</span>)</span><br><span class="line">user_info(name=<span class="string">&quot;小王&quot;</span>,age=<span class="number">18</span>,gender = <span class="string">&quot;男&quot;</span>)</span><br><span class="line">user_info(age=<span class="number">19</span>,name=<span class="string">&#x27;小花&#x27;</span>,性别=<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line">user_info(<span class="string">&quot;小明&quot;</span>,gender=<span class="string">&#x27;男&#x27;</span>,age=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以不按照固定顺序</p>
<p>可以与位置参数混用</p>
<p>如果同时使用位置参数和关键字参数，那么使用顺序是位置参数必须在关键字参数之前，但关键字参数之间不存在先后顺序</p>
</blockquote>
<p>3、缺省参数（默认参数）</p>
<p>在调用函数时，如果没有指定某个参数将抛出异常，即在定义函数时，直接指定形式参数的默认值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">...,[paremeterl = defaultvalue1]</span>):</span><br><span class="line">	[functionbody]</span><br></pre></td></tr></table></figure>

<p>注意：在定义函数时，指定默认参数的形式参数必须在所有参数的最后，否则将产生语法错误</p>
<blockquote>
<p>在python中，可以使用函数名.____default____查看函数的默认值参数的当前值，其结果是一个元组</p>
<p>函数调用时，如果为缺省参数传值则修改默认参数值，否则使用这个默认值</p>
</blockquote>
<p>4、不定长参数</p>
<p>可变参数也称为不定长参数，即传入函数中的实际参数可以是零个、一个、两个到任意个。</p>
<p>类型：</p>
<ol>
<li>位置传递</li>
<li>关键字传递</li>
</ol>
<p>在定义可变参数时，主要有两种形式，一种是：*parameter，另一种是：**paramter</p>
<p>1、*args</p>
<p>这种形式表示接收任意多个实际参数并将其放到一个（元组）中。</p>
<p>2、**kwargs</p>
<p>这种形式表示接收任意多个类似关键字参数一样显示赋值的实际参数，并将其放到一个（字典）中。</p>
<h3 id="3、匿名函数"><a href="#3、匿名函数" class="headerlink" title="3、匿名函数"></a>3、匿名函数</h3><p>匿名函数是指没有名字的函数，应用在需要一个函数，但是又不想去命名这个函数的场合。通常情况下，这样的函数只使用一次。在python中使用lambda表达式创建匿名函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="keyword">lambda</span> [arg1 [,arg2,,,,,]]:expression</span><br></pre></td></tr></table></figure>

<ul>
<li>函数作为参数传递</li>
</ul>
<blockquote>
<p>这是一种计算逻辑的传入，而非数据到传入</p>
</blockquote>
<ul>
<li><p>lambda匿名函数</p>
<p>函数的定义</p>
<ul>
<li>def关键字，可以定义带有名称的函数</li>
<li>lambda关键字，可以定义匿名函数（无名称）</li>
</ul>
<p>有名称的函数，可以基于名称重复使用</p>
<p>无名称的匿名函数，只可临时使用一次</p>
</li>
<li><p>定义语法：lambda 传入参数：函数体（一行代码）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_func</span>(<span class="params">compute</span>):</span><br><span class="line">	result = compute(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">	<span class="built_in">print</span>(result)</span><br><span class="line">test_func(<span class="keyword">lambda</span> x,y:x+y)    <span class="comment">#结果为3</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础（二）</title>
    <url>/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="一、程序的三大流程"><a href="#一、程序的三大流程" class="headerlink" title="一、程序的三大流程"></a>一、程序的三大流程</h2><p><strong>顺序——</strong>从上向下，顺序执行代码</p>
<p><strong>分支——</strong>根据条件判断，决定执行代码的分支</p>
<p><strong>循环——</strong>让特定代码重复执行</p>
<h2 id="二、判断语句（if）"><a href="#二、判断语句（if）" class="headerlink" title="二、判断语句（if）"></a>二、判断语句（if）</h2><p>如果条件满足，才能做某件事情，</p>
<p>如果条件不满足，就做另外一件事情，或者什么也不做</p>
<p><strong>判断语句</strong> <strong>又被称为“分支语句”，正是因为有了判断，才让程序有了很多的分支。</strong></p>
<p><strong>1）if语句体验</strong></p>
<p><strong>一、if判断语句基本语法</strong></p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230918214356921.png" alt="image-20230918214356921"></p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230918214412107.png" alt="image-20230918214412107"></p>
<p><strong>注：</strong>if和e1se语句以及各自的缩进部分共同是一个<strong>完整的代码块</strong></p>
<p><strong>3）elif</strong></p>
<p>但是，如果希望再增加一些条件，条件不同，需要执行的代码也不回时，就可以<strong>使用elif</strong>。</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230918214543463.png" alt="image-20230918214543463"></p>
<p><strong>注：</strong></p>
<p><strong>elif和else都必须和if联合使用，而不能单独使用</strong></p>
<p><strong>可以将if、elif和else，以及各自缩进的代码，看成一个完整的代码块）</strong></p>
<p><strong>4）if的嵌套</strong></p>
<p>elif的应用场景是：同时判断多个条件，所有的条件是平级的</p>
<p>在开发中，使用if进行条件判断，如果希望在条件成立的执行语句中再增加条件判断，就可以使用if的嵌套。</p>
<p>if的嵌套的应用场景就是：在之前条件满足的前提下，再增加额外的判断</p>
<p>if的嵌套的语法格式，除了缩进之外和之前的没有区别</p>
<p><strong>语法格式如下：</strong></p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230918214659985.png" alt="image-20230918214659985"></p>
<p>条件表达式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line">r = a <span class="keyword">if</span> a&gt;b <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure>



<h2 id="三、循环语句"><a href="#三、循环语句" class="headerlink" title="三、循环语句"></a>三、循环语句</h2><h3 id="1、While循环"><a href="#1、While循环" class="headerlink" title="1、While循环"></a>1、While循环</h3><h4 id="1、while循环基本使用"><a href="#1、while循环基本使用" class="headerlink" title="1、while循环基本使用"></a>1、while循环基本使用</h4><p>循环作用就是让<strong>指定代码重复的执行</strong>，循环条件自定义，自行控制循环条件</p>
<p><strong>while</strong>循环<strong>最常用的应用场景就是让执行的代码按照</strong>指定的次数重复执行。</p>
<p>语法：</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230918214939756.png" alt="image-20230918214939756"></p>
<p><strong>注意：</strong></p>
<p><strong>while语句以及缩进部分是一个完整的代码块</strong></p>
<h4 id="2、死循环"><a href="#2、死循环" class="headerlink" title="2、死循环"></a><strong>2、死循环</strong></h4><p>由于程序员的原因，<strong>忘记</strong>在循环内部<strong>修改循环的判断条件</strong>，导致循环持续执行，程序无法终止！</p>
<h4 id="3、python中的计数方法"><a href="#3、python中的计数方法" class="headerlink" title="3、python中的计数方法"></a><strong>3、python中的计数方法</strong></h4><p>常见的计数方法<strong>有两种</strong>，可以分为：</p>
<ul>
<li><strong>自然计数法</strong>（从1开始）——符合人类的习惯</li>
<li><strong>程序计数法</strong>（从0开始）——几乎所有的程序语言都选择从0开始</li>
</ul>
<h4 id="4、循环嵌套"><a href="#4、循环嵌套" class="headerlink" title="4、循环嵌套"></a><strong>4、循环嵌套</strong></h4><p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230918215056391.png" alt="image-20230918215056391"></p>
<h4 id="5、字符串中的转义字符"><a href="#5、字符串中的转义字符" class="headerlink" title="5、字符串中的转义字符"></a><strong>5、字符串中的转义字符</strong></h4><ul>
<li><strong>\t</strong> 在控制台输出一个制表符，协助在输出文本时垂直方向保持对齐</li>
<li><strong>\n</strong>     在控制台输出一个换行符</li>
</ul>
<p><strong>制表符的功能</strong>是在不使用表格的情况下<strong>在垂直方向按列对其文本</strong></p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230918215126783.png" alt="image-20230918215126783"></p>
<blockquote>
<p>注意事项：</p>
<p>1、条件需要提供布尔类型结构，True继续，False停止</p>
<p>2、空格缩进不能忘记</p>
<p>3、规划好循环终止条件，否则会陷入死循环</p>
</blockquote>
<h3 id="2、for循环"><a href="#2、for循环" class="headerlink" title="2、for循环"></a>2、for循环</h3><ul>
<li><p>基础语法</p>
</li>
<li><p>range语句</p>
<p>获取一个数字序列</p>
</li>
<li><p>变量作用域</p>
<p>for循环中临时变量，其作用域限定为循环内</p>
<p>是编程规范限定，非强制的</p>
</li>
</ul>
<blockquote>
<p>for循环是一个计次循环，一般应用在循环次数已知的情况下。是一种“轮询”机制，对一批内容逐个处理</p>
<p>理论上，python的for循环是无法构建成无限循环（被处理的数据集不可能无限大）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代变量 <span class="keyword">in</span> 对象：</span><br><span class="line">	循环体</span><br></pre></td></tr></table></figure>

<p>作用：</p>
<ol>
<li><p>进行数值循环</p>
<p>range(start,end,step)</p>
<p>range(num),从0开始到num结束（不包含num）</p>
</li>
<li><p>遍历字符串</p>
</li>
</ol>
<h4 id="循环的嵌套"><a href="#循环的嵌套" class="headerlink" title="循环的嵌套"></a>循环的嵌套</h4><p>在python中for循环和while循环都可以进行循环嵌套</p>
<h4 id><a href="#" class="headerlink" title></a><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230923234225607.png" alt="image-20230923234225607"></h4><blockquote>
<p>注意事项：</p>
<p>1、无法定义循环条件，只能被动取出数据处理</p>
<p>2、注意空格缩进</p>
<p>3、for循环可以和while循环相互嵌套使用</p>
</blockquote>
<h3 id="3、跳转语句"><a href="#3、跳转语句" class="headerlink" title="3、跳转语句"></a>3、跳转语句</h3><h4 id="break-和-comtinue"><a href="#break-和-comtinue" class="headerlink" title="break 和 comtinue"></a>break <strong>和</strong> <strong>comtinue</strong></h4><p>两个<strong>关键字</strong>是专门在<strong>循环</strong>使用的。</p>
<ul>
<li><strong>Break</strong> 某一条件满足时，退出循环，不在执行后续重复代码                （直接结束）</li>
<li><strong>Comtinue</strong> 某一条件满足时，不在执行后续重复的代码，中断本次循环（临时跳过）</li>
</ul>
<p>注：break 和comtinue 只针对<strong>当前所在循环</strong>有效，并且在for和while循环中作用一致</p>
<p>pass空语句：不做任何事，一般起到占位作用</p>
<h1 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h1><blockquote>
<p>一个可以存储多个元素的python数据类型，每个元素可以是任意类型的数据</p>
</blockquote>
<h3 id="1、特点"><a href="#1、特点" class="headerlink" title="1、特点"></a>1、特点</h3><p>数据容器根据特点的不同：</p>
<ul>
<li>是否支持重复元素</li>
<li>是否可以修改</li>
<li>是否有序</li>
</ul>
<p>分为五类：列表、元组、字典、集合、字符串</p>
<h1 id="序列的应用"><a href="#序列的应用" class="headerlink" title="序列的应用"></a>序列的应用</h1><h2 id="一、序列"><a href="#一、序列" class="headerlink" title="一、序列"></a>一、序列</h2><p>在python中，序列结构主要有列表、元组、集合和字典、字符串。</p>
<p>可以分为可变序列和不可变序列</p>
<p>可变序列：列表</p>
<p>不可变序列：元组、字符串</p>
<p>序列是指：内容连续、有序，可使用下标索引的一类数据容器</p>
<p>在python中通过下标访问的：</p>
<ul>
<li>从前向后，下标从零开始</li>
<li>从后向前，下标从-1开始</li>
<li>并且都是左闭右开区间</li>
</ul>
<h3 id="1、索引（Indexing）"><a href="#1、索引（Indexing）" class="headerlink" title="1、索引（Indexing）"></a>1、索引（Indexing）</h3><blockquote>
<p>序列中的每一个元素都有一个编号，也称为索引。索引从0开始，最后一个元素的索引值为-1</p>
</blockquote>
<h3 id="2、切片（slicing）"><a href="#2、切片（slicing）" class="headerlink" title="2、切片（slicing）"></a>2、切片（slicing）</h3><blockquote>
<p>切片操作是访问序列元素中元素的另一种方法，它可以访问一定范围内的元素</p>
</blockquote>
<blockquote>
<p>sname[start : end : step]</p>
<p>序列[起始：结束：步长]</p>
<p>起始可省略，省略从头开始</p>
<p>结束可省略，省略到尾结束</p>
<p>步长可省略，省略步长为1（可为负数，表示倒序执行）</p>
<p>sname:序列名称</p>
<p>start：表示切片的开始位置，如不指定则默认为0</p>
<p>end：表示切片的截至位置</p>
<p>step：表示切片的步长</p>
</blockquote>
<h3 id="3、序列相加"><a href="#3、序列相加" class="headerlink" title="3、序列相加"></a>3、序列相加</h3><p>在python中，支持两种相同类型的序列相加操作，即两个序列进行连接，使用+运算符实现。</p>
<h2 id="二、列表（list）"><a href="#二、列表（list）" class="headerlink" title="二、列表（list）"></a>二、列表（list）</h2><p>定义：在形式上，列表的所有元素都放在一对中括号“[]”内，两个相邻元素间使用“，”进行分隔。</p>
<p>在内容上，可以将整数、实数、字符串、列表、元组等任何类型的内容放在列表中，并在同一列表中，元素的类型可以不同，因为它们之间没有任何关系，也可以进行嵌套列表。</p>
<p>下标索引：</p>
<p>取出列表中的元素可以使用列表的下标索引进行取出</p>
<ul>
<li>从前向后，编号从0开始递增</li>
<li>从后向前，编号从-1开始递减</li>
<li>注意下标索引的取值范围，超出则报错</li>
</ul>
<p>常用操作： </p>
<h3 id="1、空列表"><a href="#1、空列表" class="headerlink" title="1、空列表"></a>1、空列表</h3><blockquote>
<p>emptylist &#x3D; []</p>
<p>变量名 &#x3D; list()</p>
</blockquote>
<h3 id="2、删除列表"><a href="#2、删除列表" class="headerlink" title="2、删除列表"></a>2、删除列表</h3><blockquote>
<p>del listname</p>
<p>清空列表的内容，语法：列表.clear()</p>
</blockquote>
<h3 id="3、增"><a href="#3、增" class="headerlink" title="3、增"></a>3、增</h3><blockquote>
<p>listname.append(obj)             在列表的末尾添加指定的元素，一次只能添加一个元素</p>
</blockquote>
<blockquote>
<p>listname.extend(seq)               将一个列表添加到另一个列表中，添加可迭代对象，追加列表的后面</p>
</blockquote>
<blockquote>
<p>listname.insert(index  ,  元素	)                  指定位置添加元素</p>
</blockquote>
<h3 id="4、删"><a href="#4、删" class="headerlink" title="4、删"></a>4、删</h3><blockquote>
<p>del listname[index]</p>
<p>列表.pop(下标)</p>
</blockquote>
<blockquote>
<p>listname.remove(obj)</p>
</blockquote>
<p>如果存在多个相同匹配的元素，它会删除下标索引最小的元素，remove（）如果要删除的元素不存在，就会报错</p>
<blockquote>
<p>清空列表    listname.clear()</p>
</blockquote>
<h3 id="5、改"><a href="#5、改" class="headerlink" title="5、改"></a>5、改</h3><blockquote>
<p>列表和字符串的区别是：列表是可变的，字符串是不可变的</p>
</blockquote>
<blockquote>
<p>listname[index] &#x3D; element</p>
<p>排序列表中的数字 ，调用sort()方法（从小到大），reverse()(从大到小排序)</p>
<p>修改特定位置的元素值</p>
<p>语法：列表[下标] &#x3D; 值</p>
</blockquote>
<h3 id="6、查"><a href="#6、查" class="headerlink" title="6、查"></a>6、查</h3><blockquote>
<p>统计某元素在列表中的数量，语法:list.count(元素)</p>
<p>复制列表copy（）</p>
<p>查询某元素在列表中下标，语法：列表.index(元素)</p>
<p>统计列表内有多少个元素，语法：len(列表)</p>
</blockquote>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20231031234351024.png" alt="image-20231031234351024"></p>
<h3 id="7、列表的遍历"><a href="#7、列表的遍历" class="headerlink" title="7、列表的遍历"></a>7、列表的遍历</h3><ul>
<li>while循环</li>
<li>for循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(列表):</span><br><span class="line">	元素 = 列表[index]</span><br><span class="line">	对元素进行处理</span><br><span class="line">	index += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>pyj</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> listname:</span><br><span class="line">	<span class="built_in">print</span>(element)</span><br></pre></td></tr></table></figure>

<h3 id="8、列表的加法和乘法"><a href="#8、列表的加法和乘法" class="headerlink" title="8、列表的加法和乘法"></a>8、列表的加法和乘法</h3><blockquote>
<p>加法：使用运算符+</p>
<p>乘法：使用运算符*</p>
</blockquote>
<h3 id="9、嵌套列表"><a href="#9、嵌套列表" class="headerlink" title="9、嵌套列表"></a>9、嵌套列表</h3><p>嵌套列表也可以成为二维列表，直接应用举证（matrix）</p>
<h3 id="10、访问嵌套列表"><a href="#10、访问嵌套列表" class="headerlink" title="10、访问嵌套列表"></a>10、访问嵌套列表</h3><p>1、直接使用for循环实现</p>
<p>2、使用for循环和enumerate（）函数实现</p>
<p>可以同时输出索引值和元素内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出index 和 element</span></span><br><span class="line"><span class="keyword">for</span> index,item <span class="keyword">in</span> <span class="built_in">enumerate</span>(listname):</span><br></pre></td></tr></table></figure>

<h3 id="11、浅拷贝和深拷贝"><a href="#11、浅拷贝和深拷贝" class="headerlink" title="11、浅拷贝和深拷贝"></a>11、浅拷贝和深拷贝</h3><p>python中的变量不是一个盒子，而是引用</p>
<blockquote>
<p>浅拷贝：使用copy（）方法，和切片。但对列表的嵌套就无法起作用了</p>
</blockquote>
<blockquote>
<p>深拷贝：使用copy模块有两个函数，一个是浅拷贝另一个是深拷贝（deepcopy（））</p>
</blockquote>
<h3 id="12、列表推导式"><a href="#12、列表推导式" class="headerlink" title="12、列表推导式"></a>12、列表推导式</h3><p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230924174136255.png" alt="image-20230924174136255"></p>
<blockquote>
<p>listname &#x3D; [ i  for i in listname]</p>
<p>同时二维列表同理</p>
</blockquote>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230924174735636.png" alt="image-20230924174735636"></p>
<p>列表推导式：</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230924175515851.png" alt="image-20230924175515851"></p>
<h3 id="13、列表的特点："><a href="#13、列表的特点：" class="headerlink" title="13、列表的特点："></a>13、列表的特点：</h3><ul>
<li>可容纳多个元素</li>
<li>可容纳不同类型的元素</li>
<li>数据有序存储（有下标）</li>
<li>允许重复数据存在</li>
<li>可以修改</li>
</ul>
<h2 id="三、元组（tuple）"><a href="#三、元组（tuple）" class="headerlink" title="三、元组（tuple）"></a>三、元组（tuple）</h2><p>定义：元组也称为不可变的列表，它是不可变的序列，元组所有元素存放在一对（）（可以省略圆括号）里面，使用逗号分隔</p>
<p>在内容上可以将整数、实数、字符串、列表、元组等任何类型的内容放入元组中，同一元组中它的元素类型可以不同。</p>
<blockquote>
<p>通常情况下，元组用于保存程序中不可修改的内容</p>
</blockquote>
<p>也可以使用下标获取元组元素，也可以进行切片操作，切片不是修改对象本身，而是以某种特定的组合导出一个新的对象</p>
<blockquote>
<p>定义空元组：</p>
<p>变量名 &#x3D; （）</p>
<p>变量名 &#x3D; tuple()</p>
</blockquote>
<h3 id="1、常见操作"><a href="#1、常见操作" class="headerlink" title="1、常见操作"></a>1、常见操作</h3><blockquote>
<p>1、index()  查找某个元素，如果存在则返回对应的下标，否则报错</p>
<p>2、count()  统计某个数据在当前元素出现的次数</p>
<p>3、len()    统计元组内的元素个数</p>
</blockquote>
<blockquote>
<p>元组的嵌套使用逗号，同时支持迭代</p>
</blockquote>
<blockquote>
<p>生成只有一个元素的元组，在元素后加上逗号</p>
</blockquote>
<h3 id="2、元组的特点"><a href="#2、元组的特点" class="headerlink" title="2、元组的特点"></a>2、元组的特点</h3><ul>
<li>可以容纳多个数据</li>
<li>可以容纳不同类型的数据</li>
<li>数据有序存储</li>
<li>允许重复数据</li>
<li>不可修改</li>
<li>支持while和for循环</li>
</ul>
<blockquote>
<p>如果元组内嵌套list里面的元素是可以修改的</p>
</blockquote>
<h3 id="3-、打包和解包"><a href="#3-、打包和解包" class="headerlink" title="3 、打包和解包"></a>3 、打包和解包</h3><p>生成一个元组也称为元组的打包</p>
<p>将它们一次性赋值给三个变量名的行为称为解包</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230924181156881.png" alt="image-20230924181156881"></p>
<blockquote>
<p>注：元组中的元素是不可变的，但如果元组中的元素指向可变的列表，是可以修变的里面的内容的</p>
</blockquote>
<h2 id="四、字典（dictionary）"><a href="#四、字典（dictionary）" class="headerlink" title="四、字典（dictionary）"></a>四、字典（dictionary）</h2><blockquote>
<p>字典是无序的可变序列，保存的内容是以“键-值对”的形式存放的，所有元素放在一个大括号  {  }中，以逗号分隔</p>
<p>key  ———value     键是唯一的，值可以有很多个</p>
</blockquote>
<p> 主要特点：</p>
<ul>
<li>通过键而不是通过索引来读取</li>
<li>字典是任意对象的无序集合</li>
<li>字典是可变的，而且可以任意嵌套</li>
<li>字典中的键必须唯一</li>
<li>字典中的键必须不可变</li>
<li>键值对中的key和value是任意类型（key不可为字典）</li>
<li>字典中的key不允许重复，重复添加等同于覆盖原有数据</li>
<li>字典不可用下标索引</li>
</ul>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20231012213321455.png" alt="image-20231012213321455"></p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20231101184902551.png" alt="image-20231101184902551"></p>
<h3 id="1、通过映射函数创建字典"><a href="#1、通过映射函数创建字典" class="headerlink" title="1、通过映射函数创建字典"></a>1、通过映射函数创建字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = <span class="built_in">dict</span>(<span class="built_in">zip</span>(list1,list2))</span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20231012213307793.png" alt="image-20231012213307793"></p>
<h3 id="2、通过给定的“键—值对”创建字典"><a href="#2、通过给定的“键—值对”创建字典" class="headerlink" title="2、通过给定的“键—值对”创建字典"></a>2、通过给定的“键—值对”创建字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary = <span class="built_in">dict</span>(key1 = value1,key2 = value2,....,keyn = valuen)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20231012213044511.png" alt="image-20231012213044511"></p>
<h3 id="3、通过键-值对访问字典"><a href="#3、通过键-值对访问字典" class="headerlink" title="3、通过键-值对访问字典"></a>3、通过键-值对访问字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(dictionary[key])</span><br></pre></td></tr></table></figure>

<h3 id="4、遍历字典"><a href="#4、遍历字典" class="headerlink" title="4、遍历字典"></a>4、遍历字典</h3><p>使用字典对象items()方法可以获取字典的键-值对列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary.items()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dictionary.items():</span><br><span class="line">	<span class="built_in">print</span>(key,value)</span><br></pre></td></tr></table></figure>

<h3 id="5、增"><a href="#5、增" class="headerlink" title="5、增"></a>5、增</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary[key] = value</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果新添加的元素的键与已存在的键重复，那么将使用新的值替换原来键的值，相当于修改字典的元素</p>
</blockquote>
<h3 id="6、删"><a href="#6、删" class="headerlink" title="6、删"></a>6、删</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> dictionary[key]</span><br><span class="line">d.pop(key)</span><br></pre></td></tr></table></figure>

<h3 id="7、改"><a href="#7、改" class="headerlink" title="7、改"></a>7、改</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>[key] = value</span><br><span class="line">修改多个</span><br><span class="line"><span class="built_in">dict</span>.update(&#123;<span class="string">&quot;key&quot;</span>:vlaue,<span class="string">&quot;key&quot;</span>:value&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="8、查"><a href="#8、查" class="headerlink" title="8、查"></a>8、查</h3><p>已知存在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>[key]</span><br><span class="line">传入不存在就会报错</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">get(key[.default])</span><br></pre></td></tr></table></figure>

<h3 id="9、视图对象"><a href="#9、视图对象" class="headerlink" title="9、视图对象"></a>9、视图对象</h3><blockquote>
<p>dict.items()</p>
<p>dict.keys()</p>
<p>dict.values()</p>
</blockquote>
<h3 id="10、字典推导式"><a href="#10、字典推导式" class="headerlink" title="10、字典推导式"></a>10、字典推导式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">randomdict = &#123;i:random.randint(<span class="number">10</span>,<span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;生成的字典为：&quot;</span>,randomdict)</span><br></pre></td></tr></table></figure>

<p>字典的特点：</p>
<ul>
<li>可容纳多个数据</li>
<li>可容纳不同类型的数据</li>
<li>每一份数据是key、value键值对</li>
<li>通过key获得value，key不可重复（重复会覆盖）</li>
<li>不支持下标索引</li>
<li>可以修改</li>
<li>支持for循环，不支持while循环</li>
</ul>
<h2 id="五、集合"><a href="#五、集合" class="headerlink" title="五、集合"></a>五、集合</h2><blockquote>
<p>集合中所有元素都是独一无二的，并且都是无序的。    唯一性、无序性</p>
<p>{“ ”}</p>
</blockquote>
<h3 id="1、创建集合"><a href="#1、创建集合" class="headerlink" title="1、创建集合"></a>1、创建集合</h3><p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20231012220016432.png" alt="image-20231012220016432"></p>
<blockquote>
<p>定义空集合：变量名 &#x3D;  set() </p>
</blockquote>
<blockquote>
<p>也可以使用set（）函数去重列表中的元素</p>
</blockquote>
<p>集合分为可变和不可变两种对象</p>
<p>可变的：set（）</p>
<p>不可变的：frozenset（）  可以用集合的嵌套</p>
<p>随机重集合中弹出一个元素：pop（）</p>
<blockquote>
<p>正确的创建集合和字典，需要有个刚性需求，可哈希。哈希值必须在整个生命周期中保持不变</p>
</blockquote>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20231101183731862.png" alt="image-20231101183731862"></p>
<p>集合的特点：</p>
<ul>
<li>可容纳多个数据</li>
<li>可容纳不同类型的数据</li>
<li>数据是无序存储（不支持下标索引）</li>
<li>不允许重复数据存在</li>
<li>可以修改</li>
<li>支持for循环，不可使用while循环</li>
</ul>
<h2 id="六、字符串"><a href="#六、字符串" class="headerlink" title="六、字符串"></a>六、字符串</h2><p>字符串的三种定义：</p>
<ul>
<li>单引号定义</li>
<li>双引号定义</li>
<li>三引号定义</li>
<li>引号的嵌套可以相互，并且可以使用转义字符\</li>
</ul>
<p>字符串的拼接使用 ： +       并且只能字符串和字符串拼接</p>
<p>特点：</p>
<ul>
<li>不可修改</li>
<li>只可存储字符串</li>
<li>支持下标索引</li>
<li>允许重复</li>
<li>支持遍历</li>
</ul>
<h3 id="1、字符串"><a href="#1、字符串" class="headerlink" title="1、字符串"></a>1、字符串</h3><blockquote>
<p>使用 “ ”，字符串是不可变序列，字符串是连续的字符序列</p>
</blockquote>
<p>python中的字符串还支持转义字符：</p>
<blockquote>
<p>\n ：换行符</p>
<p>\t ：制表符</p>
<p>字符串的下标：</p>
<ul>
<li>从前相互，下标从零开始</li>
<li>从后向前，下标从-1开始</li>
</ul>
</blockquote>
<p>原始字符串：r</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20230919195007351.png" alt="image-20230919195007351"></p>
<p>长字符串：”””     “””     不需要使用反斜杠实现换行</p>
<h3 id="2、拼接字符串"><a href="#2、拼接字符串" class="headerlink" title="2、拼接字符串"></a>2、拼接字符串</h3><blockquote>
<p>使用“+”运算符可以完成多个字符串的拼接</p>
</blockquote>
<h3 id="3、计算字符串的长度"><a href="#3、计算字符串的长度" class="headerlink" title="3、计算字符串的长度"></a>3、计算字符串的长度</h3><blockquote>
<p>python中提供len（）函数计算字符串长度</p>
</blockquote>
<h3 id="4、截取字符串"><a href="#4、截取字符串" class="headerlink" title="4、截取字符串"></a>4、截取字符串</h3><blockquote>
<p>string[start  :  end  :  step]</p>
</blockquote>
<h3 id="5、分搁字符串"><a href="#5、分搁字符串" class="headerlink" title="5、分搁字符串"></a>5、分搁字符串</h3><blockquote>
<p>str.split(sep,maxsplit)</p>
<p>str:要分隔字符串</p>
<p>sep:指定分割符</p>
<p>maxsplit:指定分隔次数</p>
</blockquote>
<h3 id="6、大小写字母转换"><a href="#6、大小写字母转换" class="headerlink" title="6、大小写字母转换"></a>6、大小写字母转换</h3><blockquote>
<p>1、str.capitalize()            首字母大写，其余小写</p>
<p>2、str.casefold()             返回都是小写字母的字符串，也可以处理其他语言的字符</p>
<p>3、str.title()                    每个单词的首字母大写，其余小写</p>
<p>4、str.swapcase()          大小写翻转，大写变小写，小写变大写</p>
<p>5、str.upper()                将所有字母变大写</p>
<p>6、str.lower()                将所有字母变小写，只能处理英文字母</p>
</blockquote>
<h3 id="7、左右中对齐"><a href="#7、左右中对齐" class="headerlink" title="7、左右中对齐"></a>7、左右中对齐</h3><blockquote>
<p>1、str.center()             居中</p>
<p>2、str.ljust()                 左对齐</p>
<p>3、str.rjust()                  右对齐</p>
<p>4、str.zfill()                   数字填充</p>
</blockquote>
<h3 id="8、查找"><a href="#8、查找" class="headerlink" title="8、查找"></a>8、查找</h3><blockquote>
<p>str.count()          查找</p>
<p>str.find()           从左往右找，返回索引下标</p>
<p>str.rfind()             从右往左找 ，返回索引下标</p>
<p>str.index()</p>
<p>str.rindex()       与上相似，如果找不到会出现异常</p>
</blockquote>
<h3 id="9、替换"><a href="#9、替换" class="headerlink" title="9、替换"></a>9、替换</h3><blockquote>
<p>str.expandtabs()           将tab替换空格</p>
<p>str.replace(old,new,count&#x3D;1)         替换字符串，count替换次数，不设置默认替换全部</p>
</blockquote>
<h3 id="10、去除字符串中的空格和特殊字符"><a href="#10、去除字符串中的空格和特殊字符" class="headerlink" title="10、去除字符串中的空格和特殊字符"></a>10、去除字符串中的空格和特殊字符</h3><blockquote>
<p>1、str.strip()          去掉字符串左右两侧的空格和特殊字符</p>
<p>2、str.lstrip()       去掉左侧的空格和特殊字符</p>
<p>3、str.rstrip()        去掉右侧的空格和特殊字符</p>
</blockquote>
<h3 id="11、格式化字符串"><a href="#11、格式化字符串" class="headerlink" title="11、格式化字符串"></a>11、格式化字符串</h3><p>意思：先定制一个模板，在模板中预留几个空位，然后根据需要填上相应的内容。这些空位需要通过指定的符号标记（占位符）这些符号还不会显示出来。</p>
<p>在python中，格式化字符串三种方法：</p>
<ol>
<li><p>使用%占位符      （字符串 ：%s   整数：%d  浮点数：%f）</p>
</li>
<li><p>使用字符串对象的format()方法</p>
</li>
<li><p>使用f”内容{变量}”</p>
<blockquote>
<p>str.format(args)</p>
</blockquote>
</li>
</ol>
<p>数字的精度控制：m.n</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20231103192607126.png" alt="image-20231103192607126"></p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20231028212330264.png" alt="image-20231028212330264"></p>
<p>字符串的特点：</p>
<ul>
<li>只可存储字符串</li>
<li>长度任意</li>
<li>支持索引下标</li>
<li>允许重复字符串</li>
<li>不可修改（修改得到的是新字符串）</li>
<li>支持for、while循环</li>
</ul>
<h2 id="七、数据容器的总结"><a href="#七、数据容器的总结" class="headerlink" title="七、数据容器的总结"></a>七、数据容器的总结</h2><h3 id="1、数据容器的分类："><a href="#1、数据容器的分类：" class="headerlink" title="1、数据容器的分类："></a>1、数据容器的分类：</h3><ul>
<li><p>是否支持下标索引</p>
<p>支持：列表、元组、字符串</p>
<p>不支持：集合、字典</p>
</li>
<li><p>是否支持重复元素</p>
<p>支持：列表、元组、字符串</p>
<p>不支持：集合、字典</p>
</li>
<li><p>是否可以修改</p>
<p>支持：列表、集合、字典</p>
<p>不支持：元组、字符串</p>
</li>
</ul>
<h3 id="2、应用场景："><a href="#2、应用场景：" class="headerlink" title="2、应用场景："></a>2、应用场景：</h3><ol>
<li>列表：一批数据，可修改、可重复的存储场景</li>
<li>元组：一批数据，不可修改，可重复的存储场景</li>
<li>字符串：一串字符的存储场景</li>
<li>集合：一批数据，去重存储场景</li>
<li>字典：一批数据，可用key检索value的存储场景</li>
</ol>
<h3 id="3、数据容器的通用操作："><a href="#3、数据容器的通用操作：" class="headerlink" title="3、数据容器的通用操作："></a>3、数据容器的通用操作：</h3><ul>
<li>都可遍历（集合、字典不支持while遍历，且字典遍历的是key）</li>
<li>统计功能  len(容器) 、max(容器)、min(容器)</li>
<li>容器的通用转换功能。list(容器)、str(容器)、tuple(容器)、set(容器)</li>
<li>容器排序功能。sorted(容器,[reverse &#x3D; True])   True:表示将结果进行反转</li>
</ul>
<h2 id="八、正则表达式"><a href="#八、正则表达式" class="headerlink" title="八、正则表达式"></a>八、正则表达式</h2><blockquote>
<p>正则表达式就是记录文本规则的代码</p>
</blockquote>
<h3 id="1、行定位符"><a href="#1、行定位符" class="headerlink" title="1、行定位符"></a>1、行定位符</h3><blockquote>
<p>“^”表示行的开始，“&amp;”表示行的结尾</p>
</blockquote>
<h3 id="2、元字符"><a href="#2、元字符" class="headerlink" title="2、元字符"></a>2、元字符</h3><blockquote>
<p>.匹配除换行符以外的任意字符</p>
<p>\w：匹配字母、数字、下划线或汉字</p>
<p>\s:匹配任意的空格符</p>
<p>\d:匹配数字</p>
<p>\b:匹配单词的开始或结尾</p>
</blockquote>
<h4 id="3、限定符"><a href="#3、限定符" class="headerlink" title="3、限定符"></a>3、限定符</h4><h4 id="4、字符类"><a href="#4、字符类" class="headerlink" title="4、字符类"></a>4、字符类</h4><h4 id="5、排除字符"><a href="#5、排除字符" class="headerlink" title="5、排除字符"></a>5、排除字符</h4><h4 id="6、选择字符"><a href="#6、选择字符" class="headerlink" title="6、选择字符"></a>6、选择字符</h4><h4 id="7、转义字符"><a href="#7、转义字符" class="headerlink" title="7、转义字符"></a>7、转义字符</h4><h4 id="8、分组"><a href="#8、分组" class="headerlink" title="8、分组"></a>8、分组</h4><p>9、在python中使用正则表达式语法</p>
<p>10、使用re模块实现正则表达式操作</p>
<p>匹配：</p>
<ul>
<li><p>使用match()方法进行匹配</p>
<blockquote>
<p>re.match(pattern,string,[flags])</p>
</blockquote>
</li>
<li><p>使用search()方法进行匹配</p>
<blockquote>
<p>re.search(pattern,string,[flags])</p>
</blockquote>
</li>
<li><p>使用findall()方法进行匹配</p>
<blockquote>
<p>re.findall(pattern,string,[flags])</p>
</blockquote>
</li>
</ul>
<p>替换：</p>
<ul>
<li><p>sub()方法替换字符串</p>
<blockquote>
<p>re.sub(pattern,repl,string,count,flags)</p>
</blockquote>
</li>
</ul>
<p>使用正则表达式分隔字符串</p>
<ul>
<li><p>split()方法分隔字符串</p>
<blockquote>
<p>re.split(pattern,string,[maxsplit],[flags])</p>
</blockquote>
</li>
</ul>
<h2 id="九、字符串大小比较（扩展）"><a href="#九、字符串大小比较（扩展）" class="headerlink" title="九、字符串大小比较（扩展）"></a>九、字符串大小比较（扩展）</h2><p>ASCII码表：</p>
<p><img src="/2023/10/29/python%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/image-20231101191240653.png" alt="image-20231101191240653"></p>
<p>详细请见：[菜鸟](<a href="https://www.runoob.com/w3cnote/ascii.html">ASCII 表 | 菜鸟教程 (runoob.com)</a>)</p>
<p>字符串比较：</p>
<p>字符串是按位比较，也就是一位位进行对比，只要有一位大，那么整体就大。</p>
<blockquote>
<p>单个字符之间通过ASCII码表，确定字符对应的码值数字来确定大小</p>
</blockquote>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python题目练习</title>
    <url>/2023/11/04/python%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python题目"><a href="#python题目" class="headerlink" title="python题目"></a>python题目</h1><h3 id="1、判断从键盘输入的整数是否在-0-100-之间"><a href="#1、判断从键盘输入的整数是否在-0-100-之间" class="headerlink" title="1、判断从键盘输入的整数是否在[0,100]之间"></a>1、判断从键盘输入的整数是否在[0,100]之间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的整数：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> num&lt;<span class="number">100</span> <span class="keyword">and</span> num&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你的整数在这之间。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你输入不在此区间。&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个整数：&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> num&gt;<span class="number">100</span> <span class="keyword">or</span> num&lt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输入整数小于0或大于100&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输入整数在0到100之间&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2、斐波那契数列（黄金分割数列）"><a href="#2、斐波那契数列（黄金分割数列）" class="headerlink" title="2、斐波那契数列（黄金分割数列）"></a>2、斐波那契数列（黄金分割数列）</h3><p>每个数是前两个数之和。要求，输出斐波那契数列，输出不大于1000的序列元素，以逗号分隔。</p>
<p>F(0)&#x3D;0,F(1)&#x3D;1……F(n)&#x3D;F(n-2)+F(n-1)，其中n&gt;&#x3D;2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a&lt;<span class="number">1000</span>:</span><br><span class="line">    <span class="built_in">print</span>(a,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    a,b=b,a+b</span><br></pre></td></tr></table></figure>

<h3 id="3、圆面积的计算"><a href="#3、圆面积的计算" class="headerlink" title="3、圆面积的计算"></a>3、圆面积的计算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">方法一</span><br><span class="line">r=<span class="number">25</span></span><br><span class="line">area=<span class="number">3.1415</span>*r*r</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;area=&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(area))</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> M</span><br><span class="line">r=<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入圆的半径：&#x27;</span>))</span><br><span class="line">area=M.pi*r*r</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;圆的面积为：&quot;</span>,area)</span><br></pre></td></tr></table></figure>

<h3 id="4、绘制五角红星"><a href="#4、绘制五角红星" class="headerlink" title="4、绘制五角红星"></a>4、绘制五角红星</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *   <span class="comment">#通过这个例子尝试绘制圆、正方形等</span></span><br><span class="line">color(<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)  <span class="comment">#设置笔和填充的颜色</span></span><br><span class="line">begin_fill()  <span class="comment">#开始填充</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fd(<span class="number">200</span>)  <span class="comment">#forward就是线条的长度，而right则表示转向的角度是多少</span></span><br><span class="line">    rt(<span class="number">144</span>) <span class="comment">#因为五角星每个角为36度,即旋转180-36度，所以使用循环语句重复5次，画出5个角</span></span><br><span class="line">end_fill()</span><br><span class="line">done()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python绘图Turtle库详解：https://blog.csdn.net/zengxiantao1994/article/details/76588580</span></span><br></pre></td></tr></table></figure>

<h3 id="5、绘制七彩圆圈"><a href="#5、绘制七彩圆圈" class="headerlink" title="5、绘制七彩圆圈"></a>5、绘制七彩圆圈</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">colors=[<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;indigo&#x27;</span>,<span class="string">&#x27;purple&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    c=colors[i]</span><br><span class="line">    turtle.color(c,c) <span class="comment">#同时设置pencolor, fillcolor</span></span><br><span class="line">    turtle.begin_fill()</span><br><span class="line">    turtle.rt(<span class="number">360</span>/<span class="number">7</span>)</span><br><span class="line">    turtle.circle(<span class="number">50</span>) <span class="comment">#画圆，给出半径，表示圆心在画笔的左边(右边)画圆</span></span><br><span class="line">    <span class="comment">#circle(r,extent)，第一个参数r代表的是半径，第二个参数extent代表的是角度，所以可以画弧线</span></span><br><span class="line">    turtle.end_fill()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>

<h3 id="6、绘制同心圆"><a href="#6、绘制同心圆" class="headerlink" title="6、绘制同心圆"></a>6、绘制同心圆</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.pensize(<span class="number">3</span>)</span><br><span class="line">turtle.circle(<span class="number">20</span>) <span class="comment">#绘制半径为20像素的圆</span></span><br><span class="line">turtle.circle(<span class="number">40</span>)</span><br><span class="line">turtle.circle(<span class="number">80</span>)</span><br><span class="line">turtle.circle(<span class="number">160</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7、系统提示输入用户名字，并随机生成一个幸运数字，输出结果"><a href="#7、系统提示输入用户名字，并随机生成一个幸运数字，输出结果" class="headerlink" title="7、系统提示输入用户名字，并随机生成一个幸运数字，输出结果"></a>7、系统提示输入用户名字，并随机生成一个幸运数字，输出结果</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">str1=<span class="built_in">input</span>(<span class="string">&#x27;请输入你的名字：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello！&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(str1))</span><br><span class="line">guard=<span class="built_in">ord</span>(str1[<span class="number">0</span>])%<span class="number">100</span></span><br><span class="line"><span class="comment">#ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，</span></span><br><span class="line"><span class="comment"># 它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值</span></span><br><span class="line"><span class="comment"># 如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你的幸运数字是&#x27;</span>,random.choice(<span class="built_in">range</span>(guard)))</span><br></pre></td></tr></table></figure>







<h3 id="8、获得用户输入的一个整数N，计算并输出N的32次方"><a href="#8、获得用户输入的一个整数N，计算并输出N的32次方" class="headerlink" title="8、获得用户输入的一个整数N，计算并输出N的32次方"></a>8、获得用户输入的一个整数N，计算并输出N的32次方</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数N：&quot;</span>))</span><br><span class="line">result = N ** <span class="number">32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;的32次方为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(N, result))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="9、获得用户输入的一段文字，将这段文字进行垂直输出"><a href="#9、获得用户输入的一段文字，将这段文字进行垂直输出" class="headerlink" title="9、获得用户输入的一段文字，将这段文字进行垂直输出"></a>9、获得用户输入的一段文字，将这段文字进行垂直输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="built_in">input</span>(<span class="string">&quot;请输入一段文字：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> text:</span><br><span class="line">    <span class="built_in">print</span>(ch)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10、获得用户输入的一个合法算式，例如：1-2-3-4，输出运算结果"><a href="#10、获得用户输入的一个合法算式，例如：1-2-3-4，输出运算结果" class="headerlink" title="10、获得用户输入的一个合法算式，例如：1.2+3.4，输出运算结果"></a>10、获得用户输入的一个合法算式，例如：1.2+3.4，输出运算结果</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">expression = <span class="built_in">input</span>(<span class="string">&quot;请输入一个合法算式：&quot;</span>)</span><br><span class="line">result = <span class="built_in">eval</span>(expression)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结果为：&quot;</span>, result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="11、获得用户输入的一个小数，提取并输出其整数部分"><a href="#11、获得用户输入的一个小数，提取并输出其整数部分" class="headerlink" title="11、获得用户输入的一个小数，提取并输出其整数部分"></a>11、获得用户输入的一个小数，提取并输出其整数部分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个小数：&quot;</span>))</span><br><span class="line">int_part = <span class="built_in">int</span>(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;小数&#123;&#125;的整数部分为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(num, int_part))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="12、下面代码存在多处错误，请指出"><a href="#12、下面代码存在多处错误，请指出" class="headerlink" title="12、下面代码存在多处错误，请指出"></a>12、下面代码存在多处错误，请指出</h3><p>题目：用户输入一个整数N，计算并输出1到N相加的和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">input</span>(<span class="string">&#x27;请输入整数N：&#x27;</span>);</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)</span><br><span class="line">    <span class="built_in">sum</span>+=i+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1到N求和结果：&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure>

<p>正确：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数N：&quot;</span>))</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N+<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1到&#123;&#125;相加的和为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(N, <span class="built_in">sum</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="13、输出该整数百位及以上的数字。"><a href="#13、输出该整数百位及以上的数字。" class="headerlink" title="13、输出该整数百位及以上的数字。"></a>13、输出该整数百位及以上的数字。</h3><p>获得用户输入的一个整数，输出该整数百位及以上的数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line"><span class="keyword">while</span> num &gt;= <span class="number">100</span>:</span><br><span class="line">    num //= <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;该整数百位及以上的数字为：&quot;</span>, num)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首先读入用户输入的整数num，然后使用while循环判断num是否大于等于100，如果是则将num除以10，直到num小于100为止。最后输出num的值即为百位及以上的数字。</p>
<h3 id="14、将字符串按照空格分隔并逐行打印。"><a href="#14、将字符串按照空格分隔并逐行打印。" class="headerlink" title="14、将字符串按照空格分隔并逐行打印。"></a>14、将字符串按照空格分隔并逐行打印。</h3><p>获得用户输入的一个字符串，将字符串按照空格分隔，然后逐行打印出来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;请输入一段字符串：&quot;</span>)</span><br><span class="line">words = s.split()</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="built_in">print</span>(word)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首先读入用户输入的字符串s，然后使用split()函数将其按照空格分隔成多个单词，存储到列表words中。接下来使用for循环遍历words列表，逐行打印其中的每个单词。</p>
<h3 id="15、输出对应的数字的星期字符串名称"><a href="#15、输出对应的数字的星期字符串名称" class="headerlink" title="15、输出对应的数字的星期字符串名称"></a>15、输出对应的数字的星期字符串名称</h3><p>程序读入一个表示星期几的数字（1至7），输出对应的星期字符串名称。例如：输入3，返回：星期三。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字（1-7）：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期一&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期二&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期三&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期四&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期五&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期六&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;星期日&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据题目要求，输入数字1至7对应输出星期一至星期日。因此可以使用if-elif-else语句判断输入数字的值，并输出对应的星期字符串名称。注意，这里的代码只考虑了数字1至7的情况，如果输入其他数字，会输出“输入错误”。</p>
<h3 id="16、5位回文数"><a href="#16、5位回文数" class="headerlink" title="16、5位回文数"></a>16、5位回文数</h3><p>设n是一个任意自然数，如果n的各位数字反向排列所得自然数与n相等，则n被称为回文数。从键盘输入一个5位数字，请编写程序判断这个数字是不是回文数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">input</span>(<span class="string">&quot;请输入一个5位数字：&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> num == num[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(num, <span class="string">&quot;是回文数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(num, <span class="string">&quot;不是回文数&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首先读入用户输入的5位数字，存储到字符串变量num中。然后使用字符串的切片[::-1]可以将num反转，判断反转后的字符串是否与原字符串相等，如果相等则说明num是回文数，否则不是。</p>
<h3 id="17、输出其二进制、八进制、十六进制字符串"><a href="#17、输出其二进制、八进制、十六进制字符串" class="headerlink" title="17、输出其二进制、八进制、十六进制字符串"></a>17、输出其二进制、八进制、十六进制字符串</h3><p>输入一个十进制整数，分别输出其二进制、八进制、十六进制字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line">binary_str = <span class="built_in">bin</span>(num)[<span class="number">2</span>:]</span><br><span class="line">octal_str = <span class="built_in">oct</span>(num)[<span class="number">2</span>:]</span><br><span class="line">hexadecimal_str = <span class="built_in">hex</span>(num)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;二进制：&quot;</span>, binary_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;八进制：&quot;</span>, octal_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十六进制：&quot;</span>, hexadecimal_str)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首先读入用户输入的整数num，然后使用bin()函数、oct()函数、hex()函数将num转换成对应的二进制、八进制、十六进制字符串。其中，这些函数返回的字符串包含了前缀“0b”、“0o”、“0x”，因此需要使用字符串切片取出字符串</p>
<h5 id><a href="#" class="headerlink" title></a></h5><h3 id="18、python判断闰年"><a href="#18、python判断闰年" class="headerlink" title="18、python判断闰年"></a>18、python判断闰年</h3><p>闰年的标准算法：</p>
<ul>
<li>如果一个年份能被4整除但不能被100整除，那么它是闰年。</li>
<li>如果一个年份能被400整除，那么它是闰年。</li>
</ul>
<p>如果年份满足以上任一条件，则将其判定为闰年。否则，将其判定为不是闰年。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个年份：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>) <span class="keyword">or</span> (year % <span class="number">400</span> == <span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span>是闰年&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;year&#125;</span>不是闰年&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="19、最大公约数计算。"><a href="#19、最大公约数计算。" class="headerlink" title="19、最大公约数计算。"></a>19、最大公约数计算。</h3><p>使用辗转相除法求出两个整数的最大公约数，并使用最大公约数求出最小公倍数。最大公约数可以使用辗转相除法求出，最小公倍数是两个数的乘积除以最大公约数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcm</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a * b // gcd(a, b)</span><br><span class="line"></span><br><span class="line">num1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第一个整数：&quot;</span>))</span><br><span class="line">num2 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入第二个整数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大公约数：<span class="subst">&#123;gcd(num1, num2)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最小公倍数：<span class="subst">&#123;lcm(num1, num2)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="20、统计不同字符个数"><a href="#20、统计不同字符个数" class="headerlink" title="20、统计不同字符个数"></a>20、统计不同字符个数</h3><p>该程序首先从用户键入的字符串中逐个提取字符，并使用Python内置的函数<code>isalpha</code>、<code>isdigit</code>和<code>isspace</code>来判断字符是否为英文字符、数字、空格，如果不属于以上三种，则计入其他字符。最后，程序输出各种字符的个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;请输入一行字符：&quot;</span>)</span><br><span class="line"></span><br><span class="line">letters = <span class="number">0</span></span><br><span class="line">digits = <span class="number">0</span></span><br><span class="line">spaces = <span class="number">0</span></span><br><span class="line">others = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> c.isalpha():</span><br><span class="line">        letters += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> c.isdigit():</span><br><span class="line">        digits += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> c.isspace():</span><br><span class="line">        spaces += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        others += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;字母数：<span class="subst">&#123;letters&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数字数：<span class="subst">&#123;digits&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;空格数：<span class="subst">&#123;spaces&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;其他字符数：<span class="subst">&#123;others&#125;</span>&quot;</span>)</span><br><span class="line">该程序首先从用户键入的字符串中逐个提取字符，并使用Python内置的函数isalpha、isdigit和isspace来判断字符是否为英文字符、数字、空格，如果不属于以上三种，则计入其他字符。最后，程序输出各种字符的个数。</span><br></pre></td></tr></table></figure>

<h3 id="21、羊车门问题"><a href="#21、羊车门问题" class="headerlink" title="21、羊车门问题"></a>21、羊车门问题</h3><p>首先主持人开启羊门后，对于交换没有任何影响。开始三个门中，两羊一车，那么任意选择一个门，是车门的概率是1&#x2F;3。在主持人开启羊门后，车肯定在剩下的两个门中，而自己选择的门是车门的概率是1&#x2F;3，那么交换后是车门的概率就是2&#x2F;3。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">car=random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">a=b=<span class="number">0</span>  <span class="comment">#a不换的可能数，b换的可能数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10001</span>):  <span class="comment">#可以定义一个变量n=10000，作为输入样本的数量</span></span><br><span class="line">    guess=random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> guess==car:</span><br><span class="line">        a=a+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        b=b+<span class="number">1</span></span><br><span class="line">rate1=a/<span class="number">10000</span></span><br><span class="line">rate2=b/<span class="number">10000</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;不改猜中的概率为：&#123;&#125;，更改猜中的概率为：&#123;&#125;.&quot;</span>.<span class="built_in">format</span>(rate1,rate2))</span><br></pre></td></tr></table></figure>

<h3 id="22、实现函数"><a href="#22、实现函数" class="headerlink" title="22、实现函数"></a>22、实现函数</h3><h6 id="1、实现isNum-函数，参数为一个字符串，如果这个字符串属于整数、浮点数或复数的表示，则返回True，否则返回False。"><a href="#1、实现isNum-函数，参数为一个字符串，如果这个字符串属于整数、浮点数或复数的表示，则返回True，否则返回False。" class="headerlink" title="1、实现isNum()函数，参数为一个字符串，如果这个字符串属于整数、浮点数或复数的表示，则返回True，否则返回False。"></a>1、实现isNum()函数，参数为一个字符串，如果这个字符串属于整数、浮点数或复数的表示，则返回True，否则返回False。</h6><p>2、实现isPrime()函数，参数位整数有1，2，3，4个数字，请问能组成多少个互不相同且无重复数字的三位数？分别是哪些数字？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> (i != j) <span class="keyword">and</span> (j != k) <span class="keyword">and</span> (i != k):</span><br><span class="line">                <span class="built_in">print</span>(i,j,k)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;能组成%d个互不相同且无重复数字的三位数&quot;</span> % count)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line">能组成<span class="number">24</span>个互不相同且无重复数字的三位数</span><br></pre></td></tr></table></figure>

<h3 id="23、剪刀石头布游戏"><a href="#23、剪刀石头布游戏" class="headerlink" title="23、剪刀石头布游戏"></a>23、剪刀石头布游戏</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义游戏结果信息字典</span></span><br><span class="line">result_dict = &#123;<span class="number">0</span>: <span class="string">&#x27;平局&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;你赢了&#x27;</span>, -<span class="number">1</span>: <span class="string">&#x27;你输了&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入的数字</span></span><br><span class="line">user_input = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请出拳：0-剪刀，1-石头，2-布\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成系统随机数字</span></span><br><span class="line">system_input = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据用户输入的数字和系统随机数字计算游戏结果</span></span><br><span class="line">result = (user_input - system_input) % <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出游戏结果信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你出的是：%d，系统出的是：%d，结果是：%s&#x27;</span> % (user_input, system_input, result_dict[result]))</span><br></pre></td></tr></table></figure>

<h3 id="24、计算1-100的累积和"><a href="#24、计算1-100的累积和" class="headerlink" title="24、计算1~100的累积和"></a>24、计算1~100的累积和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1~100的累积和为：&quot;</span>,<span class="built_in">sum</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="25、计算1-100的偶数的累积和"><a href="#25、计算1-100的偶数的累积和" class="headerlink" title="25、计算1~100的偶数的累积和"></a>25、计算1~100的偶数的累积和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">101</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1~100的偶数的累积和为：&quot;</span>,<span class="built_in">sum</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="26、函数题目"><a href="#26、函数题目" class="headerlink" title="26、函数题目"></a>26、函数题目</h3><p>现有商品列表如下： products &#x3D; [[“iphone”,6888],[“MacPro”,14800],[“小米6”,2499],[“Coffee”,31],[“Book”,60], [“Nike”,699]]，需打印出以下格式：</p>
<p>0 iphone 6888 </p>
<p>1 MacPro 14800</p>
<p> 2 小米6 2499 </p>
<p>3 Coffee 31 </p>
<p>4 Book 60 </p>
<p>5 Nike 699</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">products = [[<span class="string">&quot;iphone&quot;</span>,<span class="number">6888</span>],[<span class="string">&quot;MacPro&quot;</span>,<span class="number">14800</span>],[<span class="string">&quot;小米6&quot;</span>,<span class="number">2499</span>],[<span class="string">&quot;Coffee&quot;</span>,<span class="number">31</span>],[<span class="string">&quot;Book&quot;</span>,<span class="number">60</span>],[<span class="string">&quot;Nike&quot;</span>,<span class="number">699</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(products)):</span><br><span class="line">    <span class="built_in">print</span>(i, products[i][<span class="number">0</span>], products[i][<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据上面的products列表写一个循环，不断询问用户想买什么，用户选择一个商品编号，就把对应</p>
<p>的商品添加到购物车里，最终用户输入q退出时，打印购买的商品列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">products = [[<span class="string">&quot;iphone&quot;</span>,<span class="number">6888</span>],[<span class="string">&quot;MacPro&quot;</span>,<span class="number">14800</span>],[<span class="string">&quot;小米6&quot;</span>,<span class="number">2499</span>],[<span class="string">&quot;Coffee&quot;</span>,<span class="number">31</span>],[<span class="string">&quot;Book&quot;</span>,<span class="number">60</span>],[<span class="string">&quot;Nike&quot;</span>,<span class="number">699</span>]]</span><br><span class="line">shopping_list = []   <span class="comment"># 初始化购物车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(products)):</span><br><span class="line">        <span class="built_in">print</span>(i, products[i][<span class="number">0</span>], products[i][<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    user_input = <span class="built_in">input</span>(<span class="string">&quot;请输入想购买的商品编号，输入q退出：&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> user_input == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span>   <span class="comment"># 退出循环</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        product_id = <span class="built_in">int</span>(user_input)</span><br><span class="line">        <span class="keyword">if</span> product_id &lt; <span class="number">0</span> <span class="keyword">or</span> product_id &gt;= <span class="built_in">len</span>(products):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;商品编号不存在，请重新输入！&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span>   <span class="comment"># 跳过本次循环，重新输入商品编号</span></span><br><span class="line">        </span><br><span class="line">        shopping_list.append(products[product_id])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已添加商品：%s，价格：%d&quot;</span> % (products[product_id][<span class="number">0</span>], products[product_id][<span class="number">1</span>]))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请重新输入！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出购物清单</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;购物清单：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shopping_list)):</span><br><span class="line">    <span class="built_in">print</span>(i, shopping_list[i][<span class="number">0</span>], shopping_list[i][<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.写一个打印一条横线的函数。（提示：横线是若干个“-”组成）</p>
<p>2.写一个函数，可以通过输入的参数，打印出自定义行数的横线。（提示：调用上面的函数）</p>
<p>3.写一个函数求三个数的和</p>
<p>4.写一个函数求三个数的平均值（提示：调用上面的函数）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_line</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_lines</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        print_line()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_of_three_numbers</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">average_of_three_numbers</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> sum_of_three_numbers(a, b, c) / <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><p>应用文件操作的相关知识，通过Python新建一个文件gushi.txt，选择一首古诗写入文件中</p>
</li>
<li><p>另外写一个函数，读取指定文件gushi.txt，将内容复制到copy.txt中，并在控制台输出“复制完</p>
</li>
</ol>
<p>毕”。</p>
<ol start="3">
<li>提示：分别定义两个函数，完成读文件和写文件的操作</li>
</ol>
<p>尽可能完善代码，添加异常处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">write_poem_to_file</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;gushi.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            poem = <span class="string">&quot;床前明月光，疑是地上霜。举头望明月，低头思故乡。&quot;</span></span><br><span class="line">            f.write(poem)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;写入文件出错：&quot;</span>, e)</span><br><span class="line">这个函数中，我们使用了<span class="keyword">with</span>语句来打开文件，并以写入模式(<span class="string">&quot;w&quot;</span>)打开。然后，将一首古诗字符串赋值给变量poem，并将其写入文件。注意，我们指定了文件的编码为UTF-<span class="number">8</span>。</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_file</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;gushi.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;copy.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">                content = f1.read()</span><br><span class="line">                f2.write(content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;复制完毕&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;读写文件出错：&quot;</span>, e)</span><br><span class="line">这个函数中，我们使用了嵌套的<span class="keyword">with</span>语句来打开两个文件。首先，以读取模式(<span class="string">&quot;r&quot;</span>)打开gushi.txt，并将其中的内容读入到变量content中。然后，以写入模式(<span class="string">&quot;w&quot;</span>)打开copy.txt，并将content写入到其中。最后，在控制台输出<span class="string">&quot;复制完毕&quot;</span>。注意，在操作文件时，我们也添加了异常处理。</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_poem_to_file</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;gushi.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            poem = <span class="string">&#x27;静夜思\n床前明月光，\n疑是地上霜。\n举头望明月，\n低头思故乡。\n&#x27;</span></span><br><span class="line">            f.write(poem)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;写入文件失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_file_content</span>(<span class="params">src_file, dest_file</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(src_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f1, <span class="built_in">open</span>(dest_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">            content = f1.read()</span><br><span class="line">            f2.write(content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;复制完成&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;读取或写入文件失败&#x27;</span>)</span><br><span class="line">在上面的代码中，write_poem_to_file函数用于创建文件并写入古诗内容，copy_file_content函数用于复制指定文件内容并保存到另一个文件中。</span><br><span class="line"></span><br><span class="line">以下是函数的调用示例：</span><br><span class="line">write_poem_to_file()  <span class="comment"># 写入古诗到文件gushi.txt中</span></span><br><span class="line">copy_file_content(<span class="string">&#x27;gushi.txt&#x27;</span>, <span class="string">&#x27;copy.txt&#x27;</span>)  <span class="comment"># 复制gushi.txt的内容到copy.txt中</span></span><br><span class="line">当程序运行时，如果文件操作遇到问题，就会抛出异常，程序会在控制台上输出相应的提示信息。</span><br><span class="line">接下来可以测试一下代码的运行情况。</span><br><span class="line"></span><br><span class="line">先运行write_poem_to_file()函数，将古诗写入文件gushi.txt：</span><br><span class="line">write_poem_to_file()</span><br><span class="line">然后再运行copy_file_content()函数，将gushi.txt的内容复制到copy.txt中：</span><br><span class="line">copy_file_content(<span class="string">&#x27;gushi.txt&#x27;</span>, <span class="string">&#x27;copy.txt&#x27;</span>)</span><br><span class="line">如果一切正常，控制台上会输出“复制完成”的提示信息。我们可以打开copy.txt文件，查看复制后的内容是否与gushi.txt中的内容一致。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="总体概括"><a href="#总体概括" class="headerlink" title="总体概括"></a>总体概括</h5><h6 id="内含二级python编程题"><a href="#内含二级python编程题" class="headerlink" title="内含二级python编程题"></a>内含二级python编程题</h6><p><img src="/2023/11/04/python%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/1.png"></p>
<p><img src="/2023/11/04/python%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/image-20231104181758079.png" alt="image-20231104181758079"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习</title>
    <url>/2023/06/24/python%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、编程语言的执行方式"><a href="#一、编程语言的执行方式" class="headerlink" title="一、编程语言的执行方式"></a>一、编程语言的执行方式</h1><p>编程语言按执行方式来划分，分为：编译和解释两种。在介绍两种方式的概念之前，先介绍以下几种概念：</p>
<p><strong>源代码：</strong>采用某种编程语言编写的计算机程序，人类可读，例如：res &#x3D; 1 + 1；</p>
<p><strong>目标代码：</strong>指计算机可以执行，但人类不可读（专家除外），例如一组由0和1组成的字符串。</p>
<p>而怎么把人类编写的程序，变成机器可以执行的目标代码呢？ 这里就出现了程序执行的两种方式：编译和解释。</p>
<h1 id="解释与编译"><a href="#解释与编译" class="headerlink" title="解释与编译"></a>解释与编译</h1><p>解释器：一句一句翻译（类似：同声传译）python，逐条转换成目标代码同时逐条执行目标代码</p>
<p>编译器：整体翻译（类似：一次性全文翻译）c语言，只解释成目标代码，并不运行</p>
<p>java两种都可以</p>
<h1 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h1><h1 id="二、print-函数"><a href="#二、print-函数" class="headerlink" title="二、print()函数"></a>二、print()函数</h1><h2 id="1-单引号"><a href="#1-单引号" class="headerlink" title="1.单引号"></a>1.单引号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;我们一起去玩吧&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="2-双引号"><a href="#2-双引号" class="headerlink" title="2.双引号"></a>2.双引号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;我们一起去玩吧&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="3-单引号、双引号的区别"><a href="#3-单引号、双引号的区别" class="headerlink" title="3.单引号、双引号的区别"></a>3.单引号、双引号的区别</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;jack said:&quot;i love you&quot;&#x27;)</span><br><span class="line">print(&quot;Let&#x27;s play&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="4-三引号"><a href="#4-三引号" class="headerlink" title="4.三引号"></a>4.三引号</h2><p>#号注释一行</p>
<p>两对三引号：注释多行（可以是单引号，也可以是双引号，一定要成对）</p>
<p>三引号’‘’ ：跟print函数一起使用：可以输出带换行的多行文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;&#x27;&#x27;</span><br><span class="line">                .---- .</span><br><span class="line">               .       、</span><br><span class="line">            _·&#x27;__       ·</span><br><span class="line">        . --($) ($$)---/#\\</span><br><span class="line">      .`@             /###\\</span><br><span class="line">      :         ,     #####</span><br><span class="line">       `-..__.-&#x27;  _.- \###/</span><br><span class="line">           `;_:       `&quot;</span><br><span class="line">             .&#x27;&quot;&quot;&quot;&quot;&quot;&quot;`.</span><br><span class="line">            /,  hi,    \\\\</span><br><span class="line">           //  你好！    \\\\</span><br><span class="line">          `-._________.-&#x27;</span><br><span class="line">             __`.|.`__</span><br><span class="line">           (_____|_____)</span><br><span class="line">&#x27;&#x27;&#x27;)</span><br></pre></td></tr></table></figure>



<h2 id="5-转义字符总结"><a href="#5-转义字符总结" class="headerlink" title="5.转义字符总结"></a>5.转义字符总结</h2><p>使用最多：换行\n，斜杠符号\</p>
<h2 id="6-占位符"><a href="#6-占位符" class="headerlink" title="6.占位符"></a>6.占位符</h2><p>先站住一个固定的位置，等着你往里面添加内容的符号</p>
<p>%d 整型</p>
<p>%s字符串</p>
<p>%f浮点型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=3</span><br><span class="line">s=&#x27;python&#x27;</span><br><span class="line">f=4.7</span><br><span class="line">print(&#x27;%d个月可以学好%s课程&#x27;%(a,s))</span><br><span class="line">print(&#x27;%f个月可以学好%s课程&#x27;%(f,s)) # %f是默认保留小数点后6位</span><br><span class="line">print(&#x27;%.4f个月可以学好%s课程&#x27;%(f,s)) # %.4f是保留小数点后4位</span><br><span class="line"></span><br><span class="line">name=&quot;曾庆玲&quot;</span><br><span class="line">age=36</span><br><span class="line">print(&#x27;我的名字：%s,我的年龄：%d&#x27;%(name,age))</span><br><span class="line">#单个数据：%特定的字母；多个数据：%(数据列表)</span><br></pre></td></tr></table></figure>



<h1 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h1><h2 id="1-数字类型"><a href="#1-数字类型" class="headerlink" title="1.数字类型"></a>1.数字类型</h2><h3 id="整数int"><a href="#整数int" class="headerlink" title="整数int"></a>整数int</h3><p>不带小数点的数字</p>
<p>整数类型有4种进制：</p>
<p>二进制：引导符号 ：0b或者0B，例如：0b1010，0B1010</p>
<p>八进制：引导符号：0o或者0O，0到7，例如0o1010，0O1010</p>
<p>十进制：无引导符号</p>
<p>十六进制：引导符号：0x或者0X，0到9，A，B，C，D，E，F，例如0x1010，0X1010</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(0x1010&gt;0o1010)</span><br><span class="line">输出：True</span><br><span class="line"></span><br><span class="line">print(0b1010+0x1010+0o1010+1010)</span><br><span class="line">输出：5652</span><br></pre></td></tr></table></figure>



<h3 id="浮点数float"><a href="#浮点数float" class="headerlink" title="浮点数float"></a>浮点数float</h3><p>带小数点的数字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 10</span><br><span class="line">b = 3.5</span><br><span class="line">c = &#x27;xiamen&#x27;</span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(type(c))</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230102191247279.png" alt="image-20230102191247279"></p>
<p>1010是整数，1010.0是浮点数，值是相等，但是对他们进行幂运算的结果不同，pow(x,y)计算x的y次方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(pow(1010,32))</span><br><span class="line">print(pow(1010.0,32))</span><br><span class="line"></span><br><span class="line">结果不同：</span><br><span class="line">1374940678531097054162291350571104044956417832049380936096496320100000000000000000000000000000000</span><br><span class="line">1.3749406785310972e+96</span><br></pre></td></tr></table></figure>



<h3 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h3><p>有一个基本单位元素j，它被定义为j&#x3D;-1开根号，叫做“虚数单位”</p>
<p>复数可以看作二元有序实数对（a，b），表示a+bj，a是实数部分，b是虚数部分，j是一个变量</p>
<p>复数类型中实部和虚部都是浮点类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print((1.23e4+5.67e4j).real)  #求复数的实数部分</span><br><span class="line">print((1.23e4+5.67e4j).imag)   #求复数的虚数部分</span><br><span class="line">结果：</span><br><span class="line">12300.0 </span><br><span class="line">56700.0</span><br><span class="line">是浮点类型</span><br></pre></td></tr></table></figure>



<h2 id="2-四则运算"><a href="#2-四则运算" class="headerlink" title="2.四则运算"></a>2.四则运算</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(20/30)  #除法</span><br><span class="line">print(30//20) #取商</span><br><span class="line">print(30%20)   #取余数</span><br><span class="line">print(3**2)   #3的2次方</span><br><span class="line">print((5025-525)/100+18*17) #四则运算</span><br></pre></td></tr></table></figure>

<h2 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h2><p>abs(x)：x的绝对值</p>
<p>divmod(x,y)：（x&#x2F;&#x2F;y,x%y），输出二元组形式</p>
<p>pow(x,y)：幂运算，x的y次方</p>
<p>round(x)，round(x,y)：对x四舍五入，保留y位小数，无参数y时则返回x的四舍五入的整数值</p>
<p>max(x,y,z……)</p>
<p>min(x,y,z……)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(divmod(100,9))</span><br><span class="line">结果：（11，1）</span><br></pre></td></tr></table></figure>

<h2 id="真假无值或逻辑运算"><a href="#真假无值或逻辑运算" class="headerlink" title="真假无值或逻辑运算"></a>真假无值或逻辑运算</h2><h3 id="真假值：True与False"><a href="#真假值：True与False" class="headerlink" title="真假值：True与False"></a>真假值：True与False</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(0.0==False)</span><br><span class="line">print(0==False)</span><br><span class="line">print(0.1==False)</span><br><span class="line">结果：</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<h3 id="无值：None"><a href="#无值：None" class="headerlink" title="无值：None"></a>无值：None</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=print(&#x27;Hello world&#x27;)   #print()函数不返回任何内容，a的值是空，赋值为None</span><br><span class="line">print(a==None)</span><br><span class="line">结果：</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算：and-，or-，not"><a href="#逻辑运算：and-，or-，not" class="headerlink" title="逻辑运算：and ，or ，not"></a>逻辑运算：and ，or ，not</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(0 and True)</span><br><span class="line">print(not 2)</span><br><span class="line">print(0 or False)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">0</span><br><span class="line">False</span><br><span class="line">False</span><br></pre></td></tr></table></figure>



<h2 id="3、字符串str"><a href="#3、字符串str" class="headerlink" title="3、字符串str"></a>3、字符串str</h2><p>字符串类型必须有【引号】的辅助：单引号和双引号均可，可以参照print()</p>
<h3 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval()函数"></a>eval()函数</h3><p>eval(s)将去掉字符串s最外侧的引号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># print(type(eval(&quot;python&quot;))),eval()函数处理字符串“python”时，去掉了引号后，python将其解释为一个变量</span><br><span class="line">python=123</span><br><span class="line">s=eval(&quot;python&quot;)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line">a=eval(&quot;1.2&quot;)</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure>

<p>eval()函数经常与input()函数一起使用，用来获取用户输入的数字</p>
<p>input()得到的结果是字符串，经过eval()就去掉了字符串的引号，变为数字保存在变量中</p>
<h3 id="字符串的索引-同列表的索引一样"><a href="#字符串的索引-同列表的索引一样" class="headerlink" title="字符串的索引(同列表的索引一样)"></a>字符串的索引(同列表的索引一样)</h3><p>s&#x3D;“青青子衿，悠悠我心。”</p>
<p>s[1:4]   青子衿</p>
<p>s[8:4]  返回空字符串</p>
<p>s[:4]    青青子衿</p>
<p>s[5:]   悠悠我心。</p>
<p>s[::4]   青，心</p>
<p>s[8:1:-1]    步长为负数，反向方式：心我悠悠，衿子</p>
<p>s[::-1]      步长为负数，反向方式：心我悠悠，衿子青青</p>
<h3 id="字符串的基本格式化"><a href="#字符串的基本格式化" class="headerlink" title="字符串的基本格式化"></a>字符串的基本格式化</h3><p>使用方法：&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</p>
<p>槽用大括号{}表示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;&#123;&#125;曰：学而时习之，不亦说乎。&quot;.format(&#x27;孔子&#x27;))</span><br><span class="line">print(&quot;&#123;&#125;曰：学而时习之，不亦&#123;&#125;。&quot;.format(&#x27;孔子&#x27;,&#x27;乐乎&#x27;))</span><br><span class="line">结果：</span><br><span class="line">孔子曰：学而时习之，不亦说乎。</span><br><span class="line"></span><br><span class="line">print(&quot;&#123;1&#125;曰：学而时习之，不亦&#123;0&#125;。&quot;.format(&#x27;乐乎&#x27;,&#x27;孔子&#x27;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="字符串的格式控制"><a href="#字符串的格式控制" class="headerlink" title="字符串的格式控制"></a>字符串的格式控制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;等级考试&#x27;</span><br><span class="line">print(&#x27;&#123;:25&#125;&#x27;.format(s))   #默认，左对齐</span><br><span class="line">print(&#x27;&#123;:^25&#125;&#x27;.format(s))  #^是居中对齐，使用25个字符的宽度输出变量s</span><br><span class="line">print(&#x27;&#123;:&gt;25&#125;&#x27;.format(s))  #^是右对齐，使用25个字符的宽度输出变量s</span><br><span class="line">print(&#x27;&#123;:*^25&#125;&#x27;.format(s)) #^是居中对齐，并用*填充</span><br><span class="line">print(&#x27;&#123;:*&gt;25&#125;&#x27;.format(s)) #&gt;是右对齐，并用*填充</span><br></pre></td></tr></table></figure>

<h3 id="字符串类型的操作"><a href="#字符串类型的操作" class="headerlink" title="字符串类型的操作"></a>字符串类型的操作</h3><h3 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h3><p>利用字符串拼接符号【+】，将需要拼接的变量连在一起</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name1=&#x27;我&#x27;</span><br><span class="line">name2=&#x27;是&#x27;</span><br><span class="line">name3=&#x27;孙悟空&#x27;</span><br><span class="line">print(name1,name2,name3) #使用空格间隔</span><br><span class="line">print(name1+name2+name3) #中间没有任何符号</span><br></pre></td></tr></table></figure>

<h3 id="字符串的重复"><a href="#字符串的重复" class="headerlink" title="字符串的重复"></a>字符串的重复</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;等级考试&#x27;</span><br><span class="line">print(s*3)</span><br><span class="line">结果：</span><br><span class="line">等级考试等级考试等级考试</span><br></pre></td></tr></table></figure>

<h3 id="字符串的子串in操作"><a href="#字符串的子串in操作" class="headerlink" title="字符串的子串in操作"></a>字符串的子串in操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;python语言程序设计&#x27;</span><br><span class="line">print(&#x27;python&#x27; in s)</span><br><span class="line">print(&#x27;C语言&#x27; in s)</span><br><span class="line">结果：</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>str.lower()：全部字符小写</p>
<p>str.upper()：全部字符大写</p>
<p>str.split(step&#x3D;None)：str根据step被分隔的部分构成</p>
<p>str.count(sub)：sub在str中出现的次数</p>
<p>str.replace(old,new)：所有的old被替换为new</p>
<p>str.center(width,fillchar)：字符串居中函数，fillchar参数可选</p>
<p>str.strip(chars)：从str去掉左侧和右侧chars</p>
<p>str.join(a)：将a变量的每一个元素后增加一个str字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;Python is an excellent language.&#x27;</span><br><span class="line">print(s.split())  #没有参数的时候就用空格分隔，有参数就用参数分隔，返回列表</span><br><span class="line">print(s.split(&#x27;a&#x27;))</span><br><span class="line">print(s.count(&#x27;a&#x27;))</span><br><span class="line">print(s.count(&#x27;an&#x27;))</span><br><span class="line">print(s.replace(&#x27;a&#x27;,&#x27;#&#x27;))  #a被#替换</span><br><span class="line">print(s.replace(&#x27;Python&#x27;,&#x27;C&#x27;))</span><br><span class="line">s2=&#x27;python&#x27;</span><br><span class="line">print(s2.center(20,&#x27;=&#x27;))</span><br><span class="line">print(s2.center(2,&#x27;=&#x27;))   #总长度&lt;字符串的长度，则返回字符串</span><br><span class="line">s3=&#x27;    ===Python===    &#x27;   #s3的左右各4个空格</span><br><span class="line">print(s3.strip(&#x27; &#x27;))        #strip将左右的空格去掉,并没有改变s3</span><br><span class="line">s3=s3.strip(&#x27; &#x27;)</span><br><span class="line">print(s3)</span><br><span class="line">print(s3.strip(&#x27;=&#x27;))</span><br><span class="line">s4=&#x27; &#x27;</span><br><span class="line">print(s4.join(&#x27;Python&#x27;))</span><br><span class="line">s5=&#x27;,&#x27;</span><br><span class="line">print(s5.join(&#x27;Python&#x27;))</span><br></pre></td></tr></table></figure>



<h2 id="数据类型的查询——type-函数"><a href="#数据类型的查询——type-函数" class="headerlink" title="数据类型的查询——type()函数"></a>数据类型的查询——type()函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name1=&#x27;我&#x27;</span><br><span class="line">name2=&#x27;是&#x27;</span><br><span class="line">name3=&#x27;孙悟空&#x27;</span><br><span class="line">name4=100</span><br><span class="line">name5=3.4</span><br><span class="line">print(type(name1))</span><br><span class="line">print(type(name4))</span><br><span class="line">print(type(name5))</span><br></pre></td></tr></table></figure>



<h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><p>负责转换数据类型的函数一共有3种：**str()**、 **int()<strong>和</strong>float()**。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name1=&#x27;我&#x27;</span><br><span class="line">name2=&#x27;是&#x27;</span><br><span class="line">name3=&#x27;孙悟空&#x27;</span><br><span class="line">name4=100</span><br><span class="line">name5=3.4</span><br><span class="line">print(name1+name2+name3+str(name4))         #先将name4整数转换成字符串</span><br><span class="line">print(name1+name2+name3+str(int(name5)))    #先将name5浮点数转换成整数，再将整数转换成字符串</span><br></pre></td></tr></table></figure>

<p>将字符串转换成整数，进行运算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">number1 = &#x27;6&#x27;</span><br><span class="line">number2 = &#x27;1&#x27;</span><br><span class="line">print(int(number1)+int(number2))</span><br></pre></td></tr></table></figure>

<p>将字符串转换成浮点型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">height = 188.0</span><br><span class="line">weight = 180.0</span><br><span class="line">age = &#x27;89&#x27;</span><br><span class="line">print(float(height))</span><br><span class="line">print(float(weight))</span><br><span class="line">print(float(age))</span><br></pre></td></tr></table></figure>



<h2 id="4-列表list"><a href="#4-列表list" class="headerlink" title="4.列表list"></a>4.列表list</h2><h2 id="列表（list）的代码格式"><a href="#列表（list）的代码格式" class="headerlink" title="列表（list）的代码格式"></a>列表（list）的代码格式</h2><p>列表很包容，各种类型的数据（整数&#x2F;浮点数&#x2F;字符串）无所不能包。</p>
<h2 id="从列表提取单个元素"><a href="#从列表提取单个元素" class="headerlink" title="从列表提取单个元素"></a>从列表提取单个元素</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list1 = [&#x27;小明&#x27;,18,1.70]</span><br><span class="line"># print(list1)</span><br><span class="line">print(list1[0])  #偏移量是从0开始的，而非我们习惯的从1开始</span><br><span class="line">print(list1[1])</span><br><span class="line">print(list1[2])</span><br></pre></td></tr></table></figure>

<p>1.偏移量是从0开始的，而非我们习惯的从1开始；2.列表名后加带偏移量的中括号，就能取到相应位置的元素。</p>
<h2 id="从列表提取多个元素"><a href="#从列表提取多个元素" class="headerlink" title="从列表提取多个元素"></a>从列表提取多个元素</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list2 = [1,2,3,4,5,6]</span><br><span class="line">print(list2[:])  #从头到尾，全部列表</span><br><span class="line">print(list2[2:])  #从第2位开始到尾，[n:]表示从第n位开始到结尾</span><br><span class="line">print(list2[:2])  #从第0位开始到第2位，不包括第2位</span><br><span class="line">print(list2[1:3])  #从第1位开始到第3位，不包括第3位</span><br><span class="line">print(list2[2:4])   #从第2位开始到第4位，不包括第4位</span><br><span class="line">print(list2[-1:-3])  #&lt;列表名&gt;[n:m:k],当起始位置n比终点位置m大(n&gt;m时)，则返回空列表</span><br><span class="line">print(list2[-3:-1])</span><br><span class="line">print(list2[0:4:2])  #k为步长，这里k=2</span><br><span class="line">print(list2[0:4:3])</span><br><span class="line"># 总结：左右空（只有冒号），取到头；左要取，右不取</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">students = [&#x27;小明&#x27;,&#x27;小红&#x27;,5,&#x27;小田&#x27;]</span><br><span class="line">print(students[2])</span><br><span class="line">print(students[2:])  #取多个元素，还是列表</span><br></pre></td></tr></table></figure>



<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230109195001094.png"></p>
<h2 id="列表的基本操作"><a href="#列表的基本操作" class="headerlink" title="列表的基本操作"></a>列表的基本操作</h2><p>len(list):求列表的元素个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x=[&#x27;python&#x27;,[&#x27;111&#x27;,111,[111,&#x27;python&#x27;]]]</span><br><span class="line">print(len(x))</span><br><span class="line">输出结果：2</span><br></pre></td></tr></table></figure>

<p>min(list)：求列表中最小元素，列表中元素类型相同的时候才可以比较大小</p>
<p>max(list)：求列表中最大元素</p>
<p>list(ls)：将ls转变为列表类型，类似于int(),float()</p>
<h3 id="给列表增加元素"><a href="#给列表增加元素" class="headerlink" title="给列表增加元素"></a>给列表增加元素</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list3 = [1,2]</span><br><span class="line">list3.append(3) #增加元素，使用append</span><br><span class="line">list3.append(5)</span><br><span class="line">list3.append(5,6)  #这句会出错，不能增加2个元素</span><br><span class="line">list3.append(&#x27;zeng&#x27;)</span><br><span class="line">list3.append([&#x27;a&#x27;,&#x27;b&#x27;])</span><br><span class="line">list3.append([1,2,3,4])</span><br><span class="line">print(list3)</span><br><span class="line">print(list3.index(1)) #检测括号中的字符串是否在list3列表中，如果存在，则返回字符串第一次出现的位置偏移量，如果不存在则报错</span><br><span class="line">print(list3.count(1)) #count方法是计算字符串在列表中出现的次数</span><br><span class="line">print(list3.reverse()) #reverse方法是将列表反向，没有返回值</span><br><span class="line">print(ls)</span><br></pre></td></tr></table></figure>

<h3 id="给列表删除元素"><a href="#给列表删除元素" class="headerlink" title="给列表删除元素"></a>给列表删除元素</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">students = [&#x27;小明&#x27;,&#x27;小红&#x27;,5,&#x27;小田&#x27;]</span><br><span class="line">del students[2]    #删除某个元素，用del</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure>

<h3 id="列表操作的其他方法"><a href="#列表操作的其他方法" class="headerlink" title="列表操作的其他方法"></a>列表操作的其他方法</h3><p>ls.insert(i,x)：在列表ls里的第i位增加元素x，无返回值</p>
<p>ls.clear()：删除ls的所有元素</p>
<p>ls.pop(i)：将列表ls中的第i位元素取出来并删除</p>
<p>ls.reverse()：将列表ls进行元素反转</p>
<p>ls.copy()：复制ls中所有元素生成一个新列表</p>
<p>ls.remove(x)：将列表的第一次出现的x元素进行删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list3 = [1,5]</span><br><span class="line">print(list3.index(1)) #检测括号中的字符串是否在list3列表中，如果存在，则返回字符串第一次出现的位置偏移量，如果不存在则报错</span><br><span class="line">print(list3.count(1)) #count方法是计算字符串在列表中出现的次数</span><br><span class="line">print(list3.reverse()) #reverse方法是将列表反向，没有返回值</span><br><span class="line">print(list3)</span><br><span class="line">print(list3.insert(1,3333))  #在列表的第1位增加元素3333，无返回值</span><br><span class="line">print(list3)</span><br><span class="line">print(list3.pop(2)) #删除列表中的第2个元素，因为把第2个元素取出来了，所以返回第二个元素</span><br></pre></td></tr></table></figure>



<h2 id="5-字典dictionary"><a href="#5-字典dictionary" class="headerlink" title="5.字典dictionary"></a>5.字典dictionary</h2><p>类似这种名字和数值（如分数、身高、体重等）两种数据存在一一对应的情况，用第二种数据类型——“字典”（dictionary）来存储</p>
<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230109195137055.png" alt="image-20230109195137055"></p>
<p>1.列表外层用的是中括号<code>[ ]</code>，字典的外层是大括号<code>&#123; &#125;</code></p>
<p>2.列表中的元素是自成一体的，而字典的元素是由一个个键值对构成的，用英文冒号连接。如<code>&#39;小明&#39;:95</code>，其中我们把<code>&#39;小明&#39;</code>叫键（key），<code>95</code>叫值(value)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">students = [&#x27;小明&#x27;,&#x27;小红&#x27;,&#x27;小刚&#x27;]</span><br><span class="line">scores = &#123;&#x27;小明&#x27;:95,&#x27;小红&#x27;:90,&#x27;小刚&#x27;:90&#125;  #键（key），值(value)，【键值对】</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">students = [&#x27;小明&#x27;,&#x27;小红&#x27;,&#x27;小刚&#x27;]</span><br><span class="line">scores = &#123;&#x27;小明&#x27;:95,&#x27;小红&#x27;:90,&#x27;小刚&#x27;:90&#125;</span><br><span class="line">print(len(students))  #len是计算数据类型的长度</span><br><span class="line">print(len(scores))</span><br></pre></td></tr></table></figure>

<h2 id="从字典取元素"><a href="#从字典取元素" class="headerlink" title="从字典取元素"></a>从字典取元素</h2><p>从字典中提取对应的值的用法。和列表相似的是要用<code>[ ]</code>，不过因为字典没有偏移量，所以在中括号中应该写键的名称，即字典名[字典的键]。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scores = &#123;&#x27;小明&#x27;: 95, &#x27;小红&#x27;: 90, &#x27;小刚&#x27;: 90&#125;</span><br><span class="line">print(scores[&#x27;小明&#x27;])</span><br></pre></td></tr></table></figure>

<h2 id="给字典增加-x2F-删除元素"><a href="#给字典增加-x2F-删除元素" class="headerlink" title="给字典增加&#x2F;删除元素"></a>给字典增加&#x2F;删除元素</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">actor1 = &#123;&#x27;孙悟空&#x27;: &#x27;金箍棒&#x27;, &#x27;沙和尚&#x27;:&#x27;降妖宝杖&#x27;,&#x27;猪八戒&#x27;:&#x27;九齿钉耙&#x27;&#125;</span><br><span class="line">del actor1[&#x27;孙悟空&#x27;]   #删除元素del </span><br><span class="line">print(actor1)</span><br><span class="line">#增加元素&#x27;孙悟空&#x27;</span><br><span class="line">actor1[&#x27;孙悟空&#x27;]=&#x27;金箍棒&#x27;</span><br><span class="line">print(actor1)</span><br><span class="line">#增加元素&#x27;唐僧&#x27;</span><br><span class="line">actor1[&#x27;唐僧&#x27;]=&#x27;袈裟&#x27;</span><br><span class="line">print(actor1)</span><br><span class="line">#将小刚的成绩由90分修改位92</span><br><span class="line">scores = &#123;&#x27;小明&#x27;:95,&#x27;小红&#x27;:90,&#x27;小刚&#x27;:90&#125;</span><br><span class="line">scores[&#x27;小刚&#x27;] = 92</span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230109201015805.png" alt="image-20230109201015805"></p>
<h2 id="列表与字典的区别"><a href="#列表与字典的区别" class="headerlink" title="列表与字典的区别"></a>列表与字典的区别</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果==左右两边相等，值为True，不相等则为False。</span><br><span class="line">print(1 == 1)  </span><br><span class="line"># 1等于1，所以值为True</span><br><span class="line"></span><br><span class="line">print(1 == 2)</span><br><span class="line"># 1不等于2，所以为False</span><br><span class="line"></span><br><span class="line">students1 = [&#x27;小明&#x27;,&#x27;小红&#x27;,&#x27;小刚&#x27;]</span><br><span class="line">students2 = [&#x27;小刚&#x27;,&#x27;小明&#x27;,&#x27;小红&#x27;]</span><br><span class="line">print(students1 == students2)</span><br><span class="line"></span><br><span class="line">scores1 = &#123;&#x27;小明&#x27;:95,&#x27;小红&#x27;:90,&#x27;小刚&#x27;:100&#125;</span><br><span class="line">scores2 = &#123;&#x27;小刚&#x27;:100,&#x27;小明&#x27;:95,&#x27;小红&#x27;:90&#125;</span><br><span class="line">print(scores1 == scores2)</span><br></pre></td></tr></table></figure>

<p>字典相比起来就显得随和很多，调动顺序也不影响。因为列表中的数据是有序排列的，而字典中的数据是随机排列的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list1 = [&#x27;小明&#x27;,&#x27;小红&#x27;,&#x27;小刚&#x27;,&#x27;小美&#x27;]</span><br><span class="line">list1[1] = &#x27;小蓝&#x27;</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">dict1 = &#123;&#x27;小明&#x27;:&#x27;男&#x27;&#125;</span><br><span class="line">dict1[&#x27;小明&#x27;] = &#x27;女&#x27;</span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure>

<p>第二个共同点其实之前已经略有提及，即支持任意嵌套</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">students = [[&#x27;小明&#x27;,&#x27;小红&#x27;,&#x27;小刚&#x27;,&#x27;小美&#x27;],[&#x27;小强&#x27;,&#x27;小兰&#x27;,&#x27;小伟&#x27;,&#x27;小芳&#x27;]]</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">students = [[&#x27;小明&#x27;,&#x27;小红&#x27;,&#x27;小刚&#x27;,&#x27;小美&#x27;],[&#x27;小强&#x27;,&#x27;小兰&#x27;,&#x27;小伟&#x27;,&#x27;小芳&#x27;]]</span><br><span class="line">print(students[1][3])</span><br></pre></td></tr></table></figure>

<p>从列表中取出小兰，并打印出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">students = [[&#x27;小明&#x27;,&#x27;小红&#x27;,&#x27;小刚&#x27;,&#x27;小美&#x27;],[&#x27;小强&#x27;,&#x27;小兰&#x27;,&#x27;小伟&#x27;,&#x27;小芳&#x27;]]</span><br><span class="line">print(students[1][1])</span><br></pre></td></tr></table></figure>

<p>列表嵌套列表也是类似的，需要一层一层取出来，比如说要取出小芳的成绩，代码是这样写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scores = &#123;</span><br><span class="line">    &#x27;第一组&#x27;:&#123;&#x27;小明&#x27;:95,&#x27;小红&#x27;:90,&#x27;小刚&#x27;:100,&#x27;小美&#x27;:85&#125;,</span><br><span class="line">    &#x27;第二组&#x27;:&#123;&#x27;小强&#x27;:99,&#x27;小兰&#x27;:89,&#x27;小伟&#x27;:93,&#x27;小芳&#x27;:88&#125;</span><br><span class="line">    &#125;</span><br><span class="line">print(scores[&#x27;第二组&#x27;][&#x27;小芳&#x27;])</span><br></pre></td></tr></table></figure>

<h2 id="6-集合类型"><a href="#6-集合类型" class="headerlink" title="6.集合类型"></a>6.集合类型</h2><h2 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h2><p>1、集合时用大括号{}表示，但是，它没有索引和位置的概念，集合的元素可以动态增加或删除。</p>
<p>2、集合中的元素是不可以重复，元素类型是固定数据类型。列表、字典、集合本身都是可变数据类型，所以不能作为集合的元素出现。</p>
<p>3、type()返回集合的类型是set</p>
<p>4、集合中元素没有顺序，不能做比较，不能排序</p>
<h3 id="创建集合的两种方式方式"><a href="#创建集合的两种方式方式" class="headerlink" title="创建集合的两种方式方式"></a>创建集合的两种方式方式</h3><p>一是直接赋值创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#123;2,&#x27;python&#x27;,5.3&#125;</span><br><span class="line">print(type(s))</span><br><span class="line">输出结果：&lt;class &#x27;set&#x27;&gt;</span><br></pre></td></tr></table></figure>

<p>二是使用set()函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ss=set([10,11,12,13,14,15,11,12,13])  #set()函数创建集合，如果x中存在重复元素，创建集合会去除重复元素</span><br><span class="line">print(ss)</span><br><span class="line"></span><br><span class="line">s1=set()</span><br><span class="line">print(s1)  #空集合用set()表示</span><br><span class="line">输出：set()</span><br><span class="line"></span><br><span class="line">s2=set(&#x27;1112224445566&#x27;)</span><br><span class="line">print(s2)  #无序并无重复元素的集合</span><br><span class="line">输出：&#123;&#x27;1&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;2&#x27;, &#x27;6&#x27;&#125;</span><br><span class="line"></span><br><span class="line">s3=&#123;&#125;  #用&#123;&#125;定义空的元素，是dictionary</span><br><span class="line">print(type(s3)) </span><br><span class="line">输出：&lt;class &#x27;dict&#x27;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="集合的操作"><a href="#集合的操作" class="headerlink" title="集合的操作"></a>集合的操作</h2><h3 id="集合类型的4个操作符"><a href="#集合类型的4个操作符" class="headerlink" title="集合类型的4个操作符"></a>集合类型的4个操作符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#123;1,2,3&#125;</span><br><span class="line">t=&#123;1,2,4,5,6&#125;</span><br><span class="line">print(s-t)   #差集：存在S中，但不在t中</span><br><span class="line">print(s|t)    #并集：（合集）</span><br><span class="line">print(s&amp;t)   #交集</span><br><span class="line">print(s^t)   #补集：合集的总元素减去交集的元素</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="集合的操作函数"><a href="#集合的操作函数" class="headerlink" title="集合的操作函数"></a>集合的操作函数</h3><p>s.add(x)：将某个元素x增加到s集合中</p>
<p>s.clear()：清空s中的所有数据</p>
<p>s.discard(x)：移除x元素，若x不存在不会报错</p>
<p>s.pop()：随机移除某个元素并返回这个元素</p>
<p>s.remove(x)：若x存在集合中，则移除x；若不存在则报错</p>
<p>s.update(s1)：将一个集合s1中的元素加入到s中</p>
<p>x in s：x是s的元素，则返回True；否则返回False</p>
<p>x not in s：x不是s的元素，则返回True；否则返回False</p>
<h2 id="7-元组tuple"><a href="#7-元组tuple" class="headerlink" title="7.元组tuple"></a>7.元组tuple</h2><p>用圆括号（）括起来，元素之间用逗号分隔，元素的数据类型可以不相同，但是元组的元素不能被修改，比如，一年12个月</p>
<p>months&#x3D;（”January”,”February”,”March”）</p>
<h1 id="四、条件判断if"><a href="#四、条件判断if" class="headerlink" title="四、条件判断if"></a>四、条件判断if</h1><h2 id="单向判断：if"><a href="#单向判断：if" class="headerlink" title="单向判断：if"></a>单向判断：if</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stonenumber=7</span><br><span class="line">if stonenumber&gt;=6:</span><br><span class="line">    print(&#x27;你拥有了毁灭宇宙的力量&#x27;)</span><br><span class="line">    </span><br><span class="line">age=5</span><br><span class="line">if age&gt;=18:</span><br><span class="line">    print(&#x27;你成年了&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="双向判断：if…else…"><a href="#双向判断：if…else…" class="headerlink" title="双向判断：if…else…"></a>双向判断：if…else…</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stonenumber=3</span><br><span class="line">if stonenumber&gt;=6:</span><br><span class="line">    print(&#x27;你拥有了毁灭宇宙的力量&#x27;)</span><br><span class="line">else: </span><br><span class="line">    print(&#x27;带着卡魔拉去沃弥尔星寻找灵魂宝石&#x27;)    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">age=5</span><br><span class="line">if age&gt;=18:</span><br><span class="line">    print(&#x27;你成年了&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;你是未成年人&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myweigt=120</span><br><span class="line">if myweigt&gt;=100:</span><br><span class="line">    print(&#x27;不吃了&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;放心吃&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="多项判断：if-elif-else"><a href="#多项判断：if-elif-else" class="headerlink" title="多项判断：if  elif  else"></a>多项判断：if  elif  else</h2><p>判断成绩大于等于90分，优秀，小于90，大于等于80，良好，小于80大于等于60分，合格，剩下的不及格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myscore=32</span><br><span class="line">if myscore&gt;=90:</span><br><span class="line">    print(&#x27;优秀&#x27;)</span><br><span class="line">elif myscore&gt;=80 and myscore&lt;90:</span><br><span class="line">    print(&#x27;良好&#x27;)</span><br><span class="line">elif myscore&gt;=60 and myscore&lt;80:</span><br><span class="line">    print(&#x27;合格&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;不及格&#x27;)</span><br></pre></td></tr></table></figure>

<h1 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if historyscore&gt;=60:</span><br><span class="line">    print(&#x27;你已经及格&#x27;)</span><br><span class="line">    if historyscore&gt;=90:</span><br><span class="line">        print(&#x27;你很优秀&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;你是合格的&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;不及格&#x27;)</span><br><span class="line">    if historyscore&lt;30:</span><br><span class="line">        print(&#x27;学渣&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;还能抢救一下&#x27;)</span><br><span class="line">print(&#x27;程序结束&#x27;)   #此句不是必须的</span><br></pre></td></tr></table></figure>



<h1 id="五、input-函数"><a href="#五、input-函数" class="headerlink" title="五、input()函数"></a>五、input()函数</h1><h2 id="input-函数的使用"><a href="#input-函数的使用" class="headerlink" title="input()函数的使用"></a>input()函数的使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input(&#x27;请问你最喜欢西游记里的哪个角色[唐僧、孙悟空、沙和尚、猪八戒]：&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="input-函数结果的赋值"><a href="#input-函数结果的赋值" class="headerlink" title="input()函数结果的赋值"></a>input()函数结果的赋值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b = input(&#x27;请问你的qq密码是多少：&#x27;)</span><br><span class="line">print(&#x27;密码是：&#x27;+b)</span><br></pre></td></tr></table></figure>

<h2 id="input-函数的数据类型和强制转换"><a href="#input-函数的数据类型和强制转换" class="headerlink" title="input()函数的数据类型和强制转换"></a>input()函数的数据类型和强制转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choice = input(&#x27;请输入你选择的数字：&#x27;)</span><br><span class="line">#choice是str，input()是str类型 ，可以改进程序choice = int(input(&#x27;请输入你选择的数字：&#x27;))</span><br><span class="line">if int(choice) == 1:</span><br><span class="line">    print(&#x27;你选择了1&#x27;)</span><br><span class="line">elif int(choice) == 2:</span><br><span class="line">    print(&#x27;你选择了2&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;你没选择1和2&#x27;)</span><br></pre></td></tr></table></figure>



<h1 id="六、for循环"><a href="#六、for循环" class="headerlink" title="六、for循环"></a>六、for循环</h1><p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230102202721791.png" alt="image-20230102202721791"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in [1, 2, 3, 4, 5]:</span><br><span class="line">       print(i)</span><br><span class="line"></span><br><span class="line">for number in [1,2]:</span><br><span class="line">    print(number)</span><br><span class="line"></span><br><span class="line">for LOVE in [1,2]:</span><br><span class="line">    print(LOVE)</span><br><span class="line">    </span><br><span class="line">#不管i，number，LOVE都是变量名字，不必拘束变量名</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict = &#123;&#x27;日本&#x27;:&#x27;东京&#x27;,&#x27;英国&#x27;:&#x27;伦敦&#x27;,&#x27;法国&#x27;:&#x27;巴黎&#x27;&#125;</span><br><span class="line"></span><br><span class="line">for i in dict:</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">#排队办业务的人：可以是列表[1, 2, 3, 4, 5]，可以是字典 &#123;&#x27;日本&#x27;:&#x27;东京&#x27;,&#x27;英国&#x27;:&#x27;伦敦&#x27;,&#x27;法国&#x27;:&#x27;巴黎&#x27;&#125;，可以是字符串，不可以是整数和浮点数</span><br><span class="line"></span><br><span class="line">for i in &#x27;zeng&#x27;:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<h1 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(3):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line">for i in range(3):</span><br><span class="line">    print(&#x27;我很棒&#x27;)</span><br><span class="line">    </span><br><span class="line">for i in range(5):</span><br><span class="line">    print(&#x27;书恒走的第&#x27;+str(i)+&#x27;天，想他&#x27;)</span><br></pre></td></tr></table></figure>

<p>使用<code>range(a,b)</code> 函数，你可以生成了一个【取头不取尾】的整数序列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(0,10,3):</span><br><span class="line">    print(i)</span><br><span class="line">#0是起始数据，10是终点，3是步长</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116191014028.png" alt="image-20230116191014028"></p>
<p>请你用for循环完成1到100的整数分别乘以5的计算，并打印出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(1,101):</span><br><span class="line">    #print(i)</span><br><span class="line">    print(i*5)</span><br></pre></td></tr></table></figure>

<p>假设你要做大采购，让小明买醋，小红买油，小白买盐，小张买米；我们先把这堆事情写成一个字典：&#96;d &#x3D; {‘小明’:’醋’,’小红’:’油’,’小白’:’盐’,’小张’:’米’}，如果我们把这四个人要买的东西依次print出来，要写4句print语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict=&#123;&#x27;小明&#x27;:&#x27;醋&#x27;,&#x27;小红&#x27;:&#x27;油&#x27;,&#x27;小白&#x27;:&#x27;盐&#x27;,&#x27;小张&#x27;:&#x27;米&#x27;&#125;</span><br><span class="line">for i in dict:</span><br><span class="line">    print(dict[i])</span><br></pre></td></tr></table></figure>

<h1 id="七、while循环"><a href="#七、while循环" class="headerlink" title="七、while循环"></a>七、while循环</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 0</span><br><span class="line">while a &lt; 5:</span><br><span class="line">    a = a + 1</span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116192507944.png" alt="image-20230116192507944"></p>
<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116192542008.png" alt="image-20230116192542008"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password = &#x27;1&#x27;</span><br><span class="line">while password != &#x27;713&#x27;:</span><br><span class="line">    password = input(&#x27;请输入密码：&#x27;)</span><br><span class="line">print(&#x27;密码正确，请进！&#x27;)</span><br></pre></td></tr></table></figure>

<p>注意while循环的语句的缩进问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#打印出1，2，3，4，5</span><br><span class="line">a = 0</span><br><span class="line">while a &lt; 5:</span><br><span class="line">    a = a + 1</span><br><span class="line">    print(a)</span><br><span class="line">    </span><br><span class="line">#只打印最后的a值，5  </span><br><span class="line">a = 0</span><br><span class="line">while a &lt; 5:</span><br><span class="line">   a = a + 1</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">#有缩进的时候，print(a)也是循环中的“办事流程”，会将数字逐一打印。没有缩进的时候，循环中的“办事流程”就只有做加法，print(a)也就只会打印循环结束时的最后一个数字。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 0  # 定义了一个变量a</span><br><span class="line">while a &lt; 5:  # 当a小于5的时候，就自动执行后续缩进部分的语句</span><br><span class="line">    print(&#x27;现在a的值是：&#x27; + str(a)) #加一个print看看现在的a是多少</span><br><span class="line">    a = a + 1  # 每执行一次循环，变量a的值都加1</span><br><span class="line">    print(&#x27;加1后a的值是：&#x27; + str(a)) #加一个print看看加1后的a是多少</span><br><span class="line">print(&#x27;最终a的值是：&#x27; + str(a))</span><br></pre></td></tr></table></figure>

<p>前面用for循环解过“1到100分别乘以5”的题目，请改为用while来做</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i = 0</span><br><span class="line">while i &lt; 101:</span><br><span class="line">    print(i*5)</span><br><span class="line">    i =i+1</span><br></pre></td></tr></table></figure>

<h3 id="实例：验证素数"><a href="#实例：验证素数" class="headerlink" title="实例：验证素数"></a>实例：验证素数</h3><p>素数：只能被1或者自己整除，如：11，13，17，19……</p>
<p>如：19&#x2F;1&#x3D;19,19&#x2F;2&#x3D;9.XXXX,19&#x2F;3&#x3D;6.XX……19&#x2F;19&#x3D;1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num = 19</span><br><span class="line">i = 2</span><br><span class="line">a = True</span><br><span class="line">while i &gt;= 2 and i &lt;= num :</span><br><span class="line">    if num % i == 0:   # %求模运算，结果是0的话，就是余数为0，就是能被整除</span><br><span class="line">        a = False</span><br><span class="line">        break</span><br><span class="line">    i=i+1</span><br><span class="line">print(num,a,i)</span><br></pre></td></tr></table></figure>

<h3 id="实例：数组相加"><a href="#实例：数组相加" class="headerlink" title="实例：数组相加"></a>实例：数组相加</h3><p>常规思路：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=[[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">b=[[7,8,9],[1,5,0],[6,4,3]]</span><br><span class="line">c=[[0,0,0],[0,0,0],[0,0,0]]</span><br><span class="line">#定义行为row，列为column</span><br><span class="line">row=0</span><br><span class="line">column=0</span><br><span class="line">while column &lt; 3:</span><br><span class="line">    c[row][column]=a[row][column]+b[row][column]</span><br><span class="line">    column=column+1</span><br><span class="line">print(c)</span><br><span class="line">row=1</span><br><span class="line">column=0</span><br><span class="line">while column &lt; 3:</span><br><span class="line">    c[row][column]=a[row][column]+b[row][column]</span><br><span class="line">    column=column+1</span><br><span class="line">print(c)</span><br><span class="line">row=2</span><br><span class="line">column=0</span><br><span class="line">while column &lt; 3:</span><br><span class="line">    c[row][column]=a[row][column]+b[row][column]</span><br><span class="line">    column=column+1</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<p>改进思路：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=[[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">b=[[7,8,9],[1,5,0],[6,4,3]]</span><br><span class="line">c=[[0,0,0],[0,0,0],[0,0,0]]</span><br><span class="line">#定义行为row，列为column</span><br><span class="line">row=0</span><br><span class="line">while row &lt; 3:</span><br><span class="line">    column=0</span><br><span class="line">    while column &lt; 3:</span><br><span class="line">        c[row][column] = a[row][column] + b[row][column]</span><br><span class="line">        column = column + 1</span><br><span class="line">    row=row +1</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<h1 id="for和while两种循环对比"><a href="#for和while两种循环对比" class="headerlink" title="for和while两种循环对比"></a>for和while两种循环对比</h1><p>for循环和while循环最大的区别在于【循环的工作量是否确定】，for循环就像空房间依次办理业务，直到把【所有工作做完】才下班。</p>
<p>但while循环就像哨卡放行，【满足条件就一直工作】，直到不满足条件就关闭哨卡。</p>
<p>当我们【工作量确定】的时候，我们就可以让for循环来完成重复性工作。反之，要【工作量不确定时】可以让while循环来工作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 适合用for...in...循环</span><br><span class="line">for i in &#x27;神雕侠侣&#x27;:</span><br><span class="line">​     print(i)</span><br><span class="line"></span><br><span class="line"># 适合用while循环</span><br><span class="line">password = &#x27;&#x27;</span><br><span class="line">while password != &#x27;816&#x27;:</span><br><span class="line">​     password = input(&#x27;请尝试输入密码：&#x27;)</span><br></pre></td></tr></table></figure>

<p>有一种情况for循环和while循环都可以解决问题，那就是【把一件事情做N遍】：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#用for循环把诗句打印3遍</span><br><span class="line">for i in range(1,4) :</span><br><span class="line">    print(&#x27;明日复明日，明日何其多。&#x27;)</span><br><span class="line"></span><br><span class="line">#用while循环把诗句打印3遍</span><br><span class="line">j = 1</span><br><span class="line">while j&lt;4 :</span><br><span class="line">    print (&#x27;明日何其多，明日何其多。&#x27;)</span><br><span class="line">    j =j+1</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116195549837.png" alt="image-20230116195549837"></p>
<h1 id="用数据做判断：布尔值"><a href="#用数据做判断：布尔值" class="headerlink" title="用数据做判断：布尔值"></a>用数据做判断：布尔值</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(3&lt;5)</span><br><span class="line">print(3&gt;5)</span><br><span class="line">print(&#x27;长安&#x27;==&#x27;长安&#x27;)  </span><br><span class="line">print(&#x27;长安&#x27;!=&#x27;金陵&#x27;)</span><br><span class="line"></span><br><span class="line">if False:</span><br><span class="line">    print(&#x27;if False&#x27;)</span><br><span class="line"></span><br><span class="line">if True:</span><br><span class="line">    print(&#x27;if True&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116200201034.png" alt="image-20230116200201034"></p>
<p>用两个数值做比较的【布尔运算】，主要包含以下情况：</p>
<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116200243831.png" alt="image-20230116200243831"></p>
<h2 id="直接用数值做运算"><a href="#直接用数值做运算" class="headerlink" title="直接用数值做运算"></a>直接用数值做运算</h2><p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116200431952.png" alt="image-20230116200431952"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if &#x27;开心&#x27;:         #字符串是true，所以会执行下面的print</span><br><span class="line">    print(&#x27;熊猫&#x27;)</span><br><span class="line">if &#x27;&#x27;:            #&#x27;&#x27;空字符串是false，所以不会执行下面的print</span><br><span class="line">    print(&#x27;熊猫&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;以下数据判断结果都是【假】：&#x27;)</span><br><span class="line">print(bool(False))</span><br><span class="line">print(bool(0))</span><br><span class="line">print(bool(&#x27;&#x27;))</span><br><span class="line">print(bool(None))</span><br></pre></td></tr></table></figure>

<h2 id="布尔值之间的运算"><a href="#布尔值之间的运算" class="headerlink" title="布尔值之间的运算"></a>布尔值之间的运算</h2><p><code>and</code>、<code>or</code>、<code>not</code>、<code>in</code>、<code>not in</code>五种运算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 1</span><br><span class="line">b = -1</span><br><span class="line"></span><br><span class="line">print(&#x27;以下是and运算&#x27;)</span><br><span class="line">if a==1 and b==1:    # 【b实际上是-1】，and必须两个条件都满足</span><br><span class="line">    print(&#x27;True&#x27;)    #不打印</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;False&#x27;)    #打印</span><br><span class="line"></span><br><span class="line">print(&#x27;以下是or运算&#x27;)</span><br><span class="line">if a==1 or b==1:  # 【b实际上是-1】，or一个条件满足即可</span><br><span class="line">    print(&#x27;True&#x27;)  #打印</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;False&#x27;) #不打印</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116201034174.png" alt="image-20230116201034174"></p>
<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116201057342.png" alt="image-20230116201057342"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 5</span><br><span class="line">b = -1</span><br><span class="line">c = 0</span><br><span class="line">d = 7</span><br><span class="line"></span><br><span class="line">if a&lt;b and c&lt;d:</span><br><span class="line">    print(&#x27;True&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;False&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 直接运行代码即可</span><br><span class="line">list = [1,2,3,4,5]</span><br><span class="line">a = 1</span><br><span class="line"></span><br><span class="line"># 做一次布尔运算，判断“a是否在列表list之中”</span><br><span class="line">print(bool(a in list))</span><br><span class="line">print(bool(a not in list))</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116201311422.png" alt="image-20230116201311422"></p>
<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230116201329007.png" alt="image-20230116201329007"></p>
<h1 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h1><p><code>if...break</code>的意思是如果满足了某一个条件，就提前结束循环。记住，这个只能在循环内部使用。</p>
<p>用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># break语句搭配for循环</span><br><span class="line">for...in...:</span><br><span class="line">    ...</span><br><span class="line">    if ...:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line"># break语句搭配while循环</span><br><span class="line">while...(条件):</span><br><span class="line">    ...</span><br><span class="line">    if ...:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(5):</span><br><span class="line">    print(&#x27;明日复明日&#x27;)</span><br><span class="line">    if i==3:  # 当i等于3的时候触发</span><br><span class="line">        break # 结束循环</span><br><span class="line">#for循环代码，本来会循环5次，但循环到第4次的时候，满足i==3，执行break，就被break语句打断，然后结束整个for循环了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">while i&lt;5:</span><br><span class="line">    print(&#x27;明日复明日&#x27;)</span><br><span class="line">    i = i+1</span><br><span class="line">    if i==3:  # 当i等于3的时候触发</span><br><span class="line">        break # 结束循环   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while True:    </span><br><span class="line">    print(&#x27;上供一对童男童女&#x27;)</span><br><span class="line">    t = input(&#x27;孙悟空来了吗&#x27;)</span><br><span class="line">    if t == &#x27;来了&#x27;:</span><br><span class="line">        break</span><br><span class="line">print(&#x27;孙悟空制服了鲤鱼精，陈家庄再也不用上供童男童女了&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#当有多层循环的时候，break是退出最内层循环</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    s=input(&quot;请输入一个名字（按Q退出）：&quot;)</span><br><span class="line">    if s==&quot;Q&quot;:</span><br><span class="line">        break    #退出while循环</span><br><span class="line">    for i in s:</span><br><span class="line">        if i==&quot;曾&quot;:</span><br><span class="line">            break   #退出for循环，但是不退出while循环</span><br><span class="line">        print(i)    </span><br><span class="line">print(&quot;程序退出&quot;)</span><br></pre></td></tr></table></figure>

<p>continue语句</p>
<p>在循环内部使用的。当某个条件被满足的时候，触发continue语句，将跳过之后的代码，直接回到循环的开始。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># continue语句搭配for循环</span><br><span class="line">for...in...:</span><br><span class="line">    ...</span><br><span class="line">    if ...:</span><br><span class="line">        continue</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"># continue语句搭配while循环</span><br><span class="line">while...(条件):</span><br><span class="line">    ...</span><br><span class="line">    if ...:</span><br><span class="line">        continue</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(5):</span><br><span class="line">    print(&#x27;明日复明日&#x27;)</span><br><span class="line">    if i==3:  # 当i等于3的时候触发</span><br><span class="line">        continue # 回到循环开头</span><br><span class="line">    print(&#x27;这句话在i等于3的时候打印不出来&#x27;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">i = 0</span><br><span class="line">while i &lt; 5:</span><br><span class="line">    print(&#x27;明日复明日&#x27;)</span><br><span class="line">    i = i + 1</span><br><span class="line">    if i == 3:  # 当i等于3的时候触发</span><br><span class="line">        continue  # 回到循环开头</span><br><span class="line">    print(&#x27;这句话在i等于3的时候打印不出来&#x27;)</span><br></pre></td></tr></table></figure>

<p>continue是结束本次循环，但不终止整个循环，而break结束当前层次的整个循环（如果有多层循环，break是结束最内层的循环）</p>
<h1 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h1><p>pass语句就非常简单了，它的英文意思是“跳过”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = int(input(&#x27;请输入一个整数:&#x27;))</span><br><span class="line">if a &gt;= 100:</span><br><span class="line">    pass</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;你输入了一个小于100的数字&#x27;)</span><br></pre></td></tr></table></figure>

<h1 id="else语句"><a href="#else语句" class="headerlink" title="else语句"></a>else语句</h1><p>else不但可以和if配合使用，它还能跟for循环和while循环配合使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in range(5):</span><br><span class="line">    a = int(input(&#x27;请输入0来结束循环，你有5次机会:&#x27;))</span><br><span class="line">    if a == 0:</span><br><span class="line">        print(&#x27;你触发了break语句，循环结束，导致else语句不会生效。&#x27;)    </span><br><span class="line">        break</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;5次循环你都错过了，else语句生效了。&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i = 0</span><br><span class="line">while i&lt;5: </span><br><span class="line">    a = int(input(&#x27;请输入0结束循环，你有5次机会:&#x27;))</span><br><span class="line">    i = i+1</span><br><span class="line">    if a == 0:</span><br><span class="line">        print(&#x27;你触发了break语句，导致else语句不会生效。&#x27;)    </span><br><span class="line">        break</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;5次循环你都错过了，else语句生效了。&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230130192036142.png" alt="image-20230130192036142"></p>
<h3 id="实例：猜数字游戏"><a href="#实例：猜数字游戏" class="headerlink" title="实例：猜数字游戏"></a>实例：猜数字游戏</h3><p>思路：</p>
<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230130192522717.png" alt="image-20230130192522717"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">secret = 24  #设定秘密数字</span><br><span class="line">while True:</span><br><span class="line">    guess = input(&#x27;你来猜猜我的秘密数字是多少:&#x27;)   #输入猜测数字</span><br><span class="line">    if int(guess)==secret:  #数字对比</span><br><span class="line">        print(&#x27;正确！你很棒哦。&#x27;)</span><br><span class="line">        break</span><br><span class="line">    elif int(guess)&gt;secret:</span><br><span class="line">        print(&#x27;你猜的太大了，请重新猜猜~&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;你猜的太小了，请重新猜猜~&#x27;)</span><br></pre></td></tr></table></figure>

<h1 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h1><h2 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h2><p>代码都是立即运行且只能被执行一次，而函数可以让我们整合打包好代码，以便这些代码能够随时被复用，这样能极大地减少代码冗余。</p>
<p><img src="/2023/06/24/python%E5%AD%A6%E4%B9%A0/Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20230130200041345.png" alt="image-20230130200041345"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def math(x):</span><br><span class="line">    y = x ** 2 + x</span><br><span class="line">    return y</span><br><span class="line">print(math(20))</span><br><span class="line">print(math(30))</span><br></pre></td></tr></table></figure>

<p>我们之前接触过的len()函数是Python的内置函数，功能之一是可以返回字符串的长度。那么，我们可不可以自己写一个具有相同功能的函数呢？</p>
<h3 id="实例：设置计数器"><a href="#实例：设置计数器" class="headerlink" title="实例：设置计数器"></a>实例：设置计数器</h3><p>实现思路，1. 设置一个初始为0的计数器；2.遍历字符串，每遍历一次，计数器加一；3.返回计数器的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_len(words):</span><br><span class="line">    counter = 0</span><br><span class="line">    for i in words:</span><br><span class="line">        counter = counter + 1</span><br><span class="line">    return counter</span><br><span class="line"></span><br><span class="line">a = &#x27;三根皮带，四斤大豆&#x27;</span><br><span class="line">print(my_len(a))</span><br></pre></td></tr></table></figure>

<p>函数的参数传递</p>
<p>函数的参数是可选的，可以不带参数、一个参数、两个参数、多个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#定义一个函数test1，不带参数</span><br><span class="line">def test1():</span><br><span class="line">    print(&quot;this is test1&quot;)</span><br><span class="line">    pass</span><br><span class="line">#调用或使用函数test1</span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#参数可以是任何数据类型，这是一个参数</span><br><span class="line">def test2(a):</span><br><span class="line">    print(&quot;this is test2&quot;,a)</span><br><span class="line">test2(1)</span><br><span class="line">test2(&quot;hello&quot;)</span><br><span class="line">test2(3.5)</span><br><span class="line">test2([1,3,5,7])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#参数可以是任何数据类型，这是两个参数</span><br><span class="line">def test3(a,b):</span><br><span class="line">    print(&quot;this is test3&quot;,a,b)</span><br><span class="line">test3(1,&quot;hello&quot;)</span><br><span class="line">test3(a=1,b=3.8)</span><br><span class="line"></span><br><span class="line">实例：两个数的乘法计算函数，将y作为可选参数</span><br><span class="line">def multiply(x,y=10):</span><br><span class="line">    print(x*y)</span><br><span class="line">multiply(99)</span><br><span class="line">multiply(99,2)</span><br><span class="line">multiply(x=99)</span><br><span class="line">multiply(x=99,y=2)</span><br><span class="line">multiply(y=2,x=99)</span><br><span class="line">#可选参数y都放在非可选参数x的后面，调用函数的时候是把值优先给非可选参数，参数之间的顺序可以任意调整</span><br></pre></td></tr></table></figure>

<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p>return语句可以出现在函数中的任何部分，同时可以返回0个，1个，多个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def multiply(x,y=10):</span><br><span class="line">    return x*y,x+y</span><br><span class="line">a=multiply(10,20)</span><br><span class="line">print(a)</span><br><span class="line">输出结果：（200，30）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def multiply(x,y=10):</span><br><span class="line">    return x*y,x+y</span><br><span class="line">b,c=multiply(12,11)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<h3 id="多个return语句"><a href="#多个return语句" class="headerlink" title="多个return语句"></a>多个return语句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def aa(x):</span><br><span class="line">    try:</span><br><span class="line">        if x&gt;0:</span><br><span class="line">            return x+1</span><br><span class="line">        else:</span><br><span class="line">            return x-1</span><br><span class="line">    except:</span><br><span class="line">        return 0</span><br></pre></td></tr></table></figure>

<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>局部变量：函数内部定义和使用的变量，只作用在函数内部，函数退出时，变量不再存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def multiply(x,y=10):</span><br><span class="line">    z=x*y  #z是局部变量</span><br><span class="line">    return z</span><br><span class="line">s=multiply(10,11)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test(a):</span><br><span class="line">    print(a)</span><br><span class="line">    a=2   #a就是局部变量</span><br><span class="line">    print(a)</span><br><span class="line">b=3   #b就是全局变量</span><br><span class="line">test(b)</span><br><span class="line"></span><br><span class="line">def test2(a):</span><br><span class="line">    print(a)</span><br><span class="line">    a[0]=100  #a是局部变量</span><br><span class="line">    print(a)</span><br><span class="line">list=[1,2,3] #list是全局变量</span><br><span class="line">test2(list)</span><br><span class="line">print(&quot;调用函数后：&quot;,list)</span><br></pre></td></tr></table></figure>

<p>全局变量：在函数外定义的变量，在程序执行全部过程中都有效，全局变量在函数内部可以使用，使用的语法是：global &lt;全局变量&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n=2  #n是全局变量</span><br><span class="line">def multiply(x,y=10):</span><br><span class="line">    global n    #n是全局变量，global是对全局变量进行声明</span><br><span class="line">    return x*y*n</span><br><span class="line">s=multiply(3,4)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n=2  #n是全局变量</span><br><span class="line">def multiply(x,y=10):</span><br><span class="line">    n=x*y   #此处的n不是全局变量，而是局部变量</span><br><span class="line">    return n</span><br><span class="line">s=multiply(3,4)</span><br><span class="line">print(s)</span><br><span class="line">print(n)</span><br><span class="line">输出结果：12</span><br><span class="line">        2</span><br></pre></td></tr></table></figure>

<h2 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h2><p>函数是代码封装，在函数定义中又调用函数自己成为递归</p>
<h3 id="实例：计算阶乘"><a href="#实例：计算阶乘" class="headerlink" title="实例：计算阶乘"></a>实例：计算阶乘</h3><p>n！&#x3D; n(n-1)(n-2)……（1）</p>
<p>另一种表达：</p>
<p>​	当n&#x3D;0，n！&#x3D;1</p>
<p>​	当n!&#x3D;0,  n!&#x3D;n(n-1)!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def fmul(n):</span><br><span class="line">    if n==0:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return n*fmul(n-1)</span><br><span class="line">s=eval(input(&quot;请输入一个整数：&quot;))</span><br><span class="line">print(fmul(abs(int(s))))</span><br></pre></td></tr></table></figure>

<h1 id="九、文件操作"><a href="#九、文件操作" class="headerlink" title="九、文件操作"></a>九、文件操作</h1><p>文件：文本文件、二进制文件（由0，1组成）</p>
<p>r只读</p>
<p>w覆盖写入（文件不存在则创建，文件存在则覆盖写入）</p>
<p>x创建写入（文件不存在则创建，文件存在就返回异常）</p>
<p>a追加写入（文件不存在则创建，文件存在则追加写入）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f=open(&#x27;zeng.txt&#x27;,&#x27;w&#x27;)  #打开文件,采用w，写入模式，如果文件不存在，创建一个</span><br><span class="line">f.write(&#x27;hello&#x27;) #写入内容</span><br><span class="line">f.write(&#x27;i am zengqingling&#x27;) #写入内容</span><br><span class="line">f.write(&#x27;hello&#x27;) #写入内容</span><br><span class="line">f.close() #关闭文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f=open(&#x27;zeng.txt&#x27;,&#x27;w&#x27;)  #w的方式是覆盖写入</span><br><span class="line">f.write(&#x27;123456&#x27;) #写入内容</span><br><span class="line">f.close() #关闭文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f=open(&#x27;b.txt&#x27;,&#x27;x&#x27;)  #打开文件,采用X，文件不存在则创建，文件存在就返回异常FileExistsError</span><br><span class="line">f.write(&#x27;abcv&#x27;) #写入内容</span><br><span class="line">f.close() #关闭文件</span><br></pre></td></tr></table></figure>

<h2 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h2><h3 id="按字符来读取"><a href="#按字符来读取" class="headerlink" title="按字符来读取"></a>按字符来读取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f=open(&#x27;text.txt&#x27;,&#x27;w&#x27;)</span><br><span class="line">f.write(&quot;hello,i am zengqingling&quot;)</span><br><span class="line">f.close()</span><br><span class="line">f=open(&#x27;text.txt&#x27;,&#x27;r&#x27;)</span><br><span class="line">content=f.read(5)  #读取5个字符</span><br><span class="line">print(content)</span><br><span class="line">content=f.read(6)  #接上面的，继续读取6个字符</span><br><span class="line">print(content)</span><br><span class="line">content=f.read(3)</span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>

<h3 id="按行读取"><a href="#按行读取" class="headerlink" title="按行读取"></a>按行读取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f=open(&#x27;text.txt&#x27;,&#x27;r&#x27;)</span><br><span class="line">content=f.readline()  #按行读取文件的内容，按行读取到的是字符串</span><br><span class="line">print(content)</span><br><span class="line">print(type(content))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>



<h3 id="取整个文件"><a href="#取整个文件" class="headerlink" title="取整个文件"></a>取整个文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f=open(&#x27;text.txt&#x27;,&#x27;r&#x27;)</span><br><span class="line">content=f.readlines()  #一次性读取全部文件作为列表，文件中的每行作为列表的一个元素</span><br><span class="line">print(content)</span><br><span class="line">print(type(content))  #是列表类型</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">[&#x27;hello\n&#x27;, &#x27;i am zengqingling\n&#x27;, &#x27;i am a  teacher&#x27;]</span><br><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f=open(&#x27;text.txt&#x27;,&#x27;r&#x27;)</span><br><span class="line">content=f.readlines()  #将整个文件读取出来，存为列表</span><br><span class="line">i=1</span><br><span class="line">for t in content:</span><br><span class="line">    print(&quot;第%d行:%s&quot;%(i,t),end=&#x27;&#x27;)  </span><br><span class="line">    i=i+1</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">第1行:hello</span><br><span class="line">第2行:i am zengqingling</span><br><span class="line">第3行:i am a  teacher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f=open(&#x27;text.txt&#x27;,&#x27;r&#x27;)</span><br><span class="line">content=f.read()  #文件读取后，读取指针已经到了文件的末尾了</span><br><span class="line">print(content)</span><br><span class="line">content2=f.readlines()   #上面指针已经到文件末尾，再将整个文件读取出来，存为列表，那么读到的是空内容</span><br><span class="line">print(content2)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">hello</span><br><span class="line">i am zengqingling</span><br><span class="line">i am a  teacher</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f=open(&#x27;text.txt&#x27;,&#x27;r&#x27;)</span><br><span class="line">content=f.read()  #文件读取后，读取指针已经到了文件的末尾了</span><br><span class="line">print(content)</span><br><span class="line">f.seek(0) #将读取指针重置到文件开头</span><br><span class="line">content2=f.readlines()   #上面指针已经到文件末尾，再将整个文件读取出来，存为列表，那么读到的是空内容</span><br><span class="line">print(content2)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">hello</span><br><span class="line">i am zengqingling</span><br><span class="line">i am a  teacher</span><br><span class="line">[&#x27;hello\n&#x27;, &#x27;i am zengqingling\n&#x27;, &#x27;i am a  teacher&#x27;]</span><br></pre></td></tr></table></figure>

<p>f.seek(0)   #将读取指针重置到文件开头</p>
<p>f.seek(2)    #将读取指针移动到文件结尾</p>
<h3 id="引入文件操作库"><a href="#引入文件操作库" class="headerlink" title="引入文件操作库"></a>引入文件操作库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os   #引入os.py</span><br><span class="line">os.renames(&#x27;c.txt&#x27;,&#x27;ccc.txt&#x27;)</span><br><span class="line">os.remove(&#x27;ccc.txt&#x27;)</span><br></pre></td></tr></table></figure>

<h1 id="十、模块"><a href="#十、模块" class="headerlink" title="十、模块"></a>十、模块</h1><p>模块是最高级别的程序组织单元，一个py文件就是一个模块，比如os.py</p>
<h2 id="模块的分类："><a href="#模块的分类：" class="headerlink" title="模块的分类："></a>模块的分类：</h2><p>1、标准模块（内置模块）：直接用import使用</p>
<p>2、第三方模块：pip，install</p>
<p>3、自定义模块：自己写的</p>
<h2 id="引入标准库"><a href="#引入标准库" class="headerlink" title="引入标准库"></a>引入标准库</h2><h3 id="实例：猜数字游戏（随机数）"><a href="#实例：猜数字游戏（随机数）" class="headerlink" title="实例：猜数字游戏（随机数）"></a>实例：猜数字游戏（随机数）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#请产生一个随机数1--1000之间的随机数，让对方猜你心里想的数字</span><br><span class="line">import random  #引入随机数的库</span><br><span class="line">target=random.randint(1,1000)</span><br><span class="line">count=0</span><br><span class="line">while True:</span><br><span class="line">    guess=eval(input(&#x27;请输入一个猜测的整数：&#x27;))</span><br><span class="line">    count=count+1 #count+=1</span><br><span class="line">    if guess &gt; target:</span><br><span class="line">        print(&#x27;猜大了&#x27;)</span><br><span class="line">    elif guess &lt; target:</span><br><span class="line">        print(&quot;猜小了&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;猜对了&#x27;)</span><br><span class="line">        break</span><br><span class="line">print(&#x27;一共猜了%d次&#x27;%count)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time  #从伦敦时间1970.1.1.0点开始计算到现在</span><br><span class="line">print(time.time())  #每次运行的时间不一样</span><br><span class="line">print(time.localtime())</span><br><span class="line"></span><br><span class="line">print(&#x27;hello&#x27;)</span><br><span class="line">time.sleep(5)</span><br><span class="line">print(&#x27;i am zengqingling&#x27;)</span><br></pre></td></tr></table></figure>

<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=input(&#x27;请输入被除数：&#x27;)</span><br><span class="line">b=input(&#x27;请输入除数：&#x27;)</span><br><span class="line">if a.isdigit() and b.isdigit():</span><br><span class="line">    a = int(a)</span><br><span class="line">    b = int(b)</span><br><span class="line">    c = a / b</span><br><span class="line">    print(&quot;商为：%f&quot; % c)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;输入类型有误&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=input(&#x27;请输入被除数：&#x27;)</span><br><span class="line">b=input(&#x27;请输入除数：&#x27;)</span><br><span class="line">if a.isdigit() and b.isdigit():</span><br><span class="line">    a = int(a)</span><br><span class="line">    b = int(b)</span><br><span class="line">    if b!= 0:</span><br><span class="line">        c = a / b</span><br><span class="line">        print(&quot;商为：%f&quot; % c)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;除数不能为0&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;输入类型有误&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=input(&#x27;请输入被除数：&#x27;)</span><br><span class="line">b=input(&#x27;请输入除数：&#x27;)</span><br><span class="line">try:</span><br><span class="line">    a = int(a)</span><br><span class="line">    b = int(b)</span><br><span class="line">    c = a / b</span><br><span class="line">    print(&quot;商为：%f&quot; % c)</span><br><span class="line">except:</span><br><span class="line">    print(&quot;输入类型有误或者除数不能为0&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=input(&#x27;请输入被除数：&#x27;)</span><br><span class="line">b=input(&#x27;请输入除数：&#x27;)</span><br><span class="line">try:</span><br><span class="line">    a = int(eval(a))</span><br><span class="line">    b = int(eval(b))</span><br><span class="line">    c = a/b</span><br><span class="line">    print(&quot;商为：%g&quot; % c)</span><br><span class="line">except ValueError:</span><br><span class="line">    print(&quot;输入类型有误&quot;)</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    print(&quot;除数不能为0&quot;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于</title>
    <url>/2023/06/19/tags/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>本人大二，正在学习阶段。</p>
<p>写博客的目的：</p>
<p>​	1、总结学习内容，梳理自己的知识体系，更加系统的学习知识。</p>
<p>​	2、记录学习中遇到的问题，并解决总结解决问题的经验。</p>
<p>​	3、分享给他人，希望对你们有所帮助。</p>
<p>联系方式：</p>
<p>邮箱：<a href="mailto:&#50;&#x37;&#55;&#51;&#48;&#55;&#51;&#53;&#52;&#x32;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;">&#50;&#x37;&#55;&#51;&#48;&#55;&#51;&#53;&#52;&#x32;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a></p>
<hr>
]]></content>
      <tags>
        <tag>tags</tag>
      </tags>
  </entry>
  <entry>
    <title>修改任务栏中工具颜色</title>
    <url>/2023/10/30/%E4%BF%AE%E6%94%B9%E4%BB%BB%E5%8A%A1%E6%A0%8F%E4%B8%AD%E5%B7%A5%E5%85%B7%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="修改任务栏中工具的颜色"><a href="#修改任务栏中工具的颜色" class="headerlink" title="修改任务栏中工具的颜色"></a>修改任务栏中工具的颜色</h1><ol>
<li><p>打开注册表编辑器</p>
</li>
<li><p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize</span><br></pre></td></tr></table></figure>

<p>打开更改ColorPrevalence中数值，然后重启就行。</p>
</li>
</ol>
<p>重启：</p>
<ol>
<li>关机重启</li>
<li><img src="/2023/10/30/%E4%BF%AE%E6%94%B9%E4%BB%BB%E5%8A%A1%E6%A0%8F%E4%B8%AD%E5%B7%A5%E5%85%B7%E9%A2%9C%E8%89%B2/image-20230728103547408.png" alt="image-20230728103547408"></li>
</ol>
<p>重新启动</p>
<p> 命名：Personalize，后缀reg方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize]</span><br><span class="line">&quot;ColorPrevalence&quot;=dword:00000002</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Question</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>古诗</title>
    <url>/2023/06/16/%E5%8F%A4%E8%AF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="经乱离后天恩流夜郎忆旧游书怀赠江夏韦太守良宰"><a href="#经乱离后天恩流夜郎忆旧游书怀赠江夏韦太守良宰" class="headerlink" title="经乱离后天恩流夜郎忆旧游书怀赠江夏韦太守良宰"></a><center>经乱离后天恩流夜郎忆旧游书怀赠江夏韦太守良宰</center></h1><div align="center">
天上白玉京，十二楼五城。
仙人抚我顶，结发受长生。
误逐世间乐，颇穷理乱情。
九十六圣君，浮云挂空名。
天地赌一掷，未能忘战争。
试涉霸王略，将期轩冕荣。
时命乃大谬，弃之海上行。
学剑翻自哂，为文竟何成。
剑非万人敌，文窃四海声。
儿戏不足道，五噫出西京。
临当欲去时，慷慨泪沾缨。
叹君倜傥才，标举冠群英。
开筵引祖帐，慰此远徂征。
鞍马若浮云，送余骠骑亭。
歌钟不尽意，白日落昆明。
十月到幽州，戈鋋若罗星。
君王弃北海，扫地借长鲸。
呼吸走百川，燕然可摧倾。
心知不得语，却欲栖蓬瀛。
弯弧惧天狼，挟矢不敢张。
揽涕黄金台，呼天哭昭王。
无人贵骏骨，騄耳空腾骧。
乐毅倘再生，于今亦奔亡。
蹉跎不得意，驱马还贵乡。
逢君听弦歌，肃穆坐华堂。
百里独太古，陶然卧羲皇。
征乐昌乐馆，开筵列壶觞。
贤豪间青娥，对烛俨成行。
醉舞纷绮席，清歌绕飞梁。
欢娱未终朝，秩满归咸阳。
祖道拥万人，供帐遥相望。
一别隔千里，荣枯异炎凉。
炎凉几度改，九土中横溃。
汉甲连胡兵，沙尘暗云海。
草木摇杀气，星辰无光彩。
白骨成丘山，苍生竟何罪。
函关壮帝居，国命悬哥舒。
长戟三十万，开门纳凶渠。
公卿如犬羊，忠谠醢与菹。
二圣出游豫，两京遂丘墟。
帝子许专征，秉旄控强楚。
节制非桓文，军师拥熊虎。
人心失去就，贼势腾风雨。
惟君固房陵，诚节冠终古。
仆卧香炉顶，餐霞漱瑶泉。
门开九江转，枕下五湖连。
半夜水军来，浔阳满旌旃。
空名适自误，迫胁上楼船。
徒赐五百金，弃之若浮烟。
辞官不受赏，翻谪夜郎天。
夜郎万里道，西上令人老。
扫荡六合清，仍为负霜草。
日月无偏照，何由诉苍昊。
良牧称神明，深仁恤交道。
一忝青云客，三登黄鹤楼。
顾惭祢处士，虚对鹦鹉洲。
樊山霸气尽，寥落天地秋。
江带峨眉雪，川横三峡流。
万舸此中来，连帆过扬州。
送此万里目，旷然散我愁。
纱窗倚天开，水树绿如发。
窥日畏衔山，促酒喜得月。
吴娃与越艳，窈窕夸铅红。
呼来上云梯，含笑出帘栊。
对客小垂手，罗衣舞春风。
宾跪请休息，主人情未极。
览君荆山作，江鲍堪动色。
清水出芙蓉，天然去雕饰。
逸兴横素襟，无时不招寻。
朱门拥虎士，列戟何森森。
剪凿竹石开，萦流涨清深。
登台坐水阁，吐论多英音。
片辞贵白璧，一诺轻黄金。
谓我不愧君，青鸟明丹心。
五色云间鹊，飞鸣天上来。
传闻赦书至，却放夜郎回。
暖气变寒谷，炎烟生死灰。
君登凤池去，忽弃贾生才。
桀犬尚吠尧，匈奴笑千秋。
中夜四五叹，常为大国忧。
旌旆夹两山，黄河当中流。
连鸡不得进，饮马空夷犹。
安得羿善射，一箭落旄头。</div>



<h3 id="译文："><a href="#译文：" class="headerlink" title="译文："></a>译文：</h3><h5 id="天上宫阙，白玉京城，有十二楼阁，五座城池。-仙人为我抚顶，结受长生命符。-突然想来人间一游，误逐世间的环乐，以尽前缘。-人间从开始到现在已经有九十六圣君，空名挂于浮云端。-以天地为赌注，一掷决定命运，一直战争不停。-我曾经学习霸王战略，希望能功成名就，锦衣返乡。-可是时运不佳，长期漂泊五湖四海。-曾经去山东学剑，没有什么结果，会写点文章，可那有什么用呢？-剑术并非万人之敌，防防身的技术，文章倒是四海闻名，罕有人匹敌。-这些都是些儿戏，微不足道，所以我象梁鸿一样看破了世界，唱着五噫歌离开西京长安。-不过在临去之时，我还是流下了慷慨激扬的泪水，打湿了我的帽上红缨。-叹君也是个倜傥之才，气质品格冠群英。-道旁设帐为我饯行，慰籍我此次远征的艰辛。-鞍马生涯如浮云，送我送在骠骑亭。-歌声钟鼓声表达不尽你的情意，白日马上就要落在昆明池中。-我曾经在某年十月到达幽州，看见安禄山的军阵兵甲灿烂如群星。-君王唐玄宗放弃东北河北，整个地区都由安禄山横行无忌，犹如长鲸在海洋横行。-呼吸之间就走遍百川，燕然山也仿佛可被他摧毁。-我心知我在皇上那里不得意，说也无用，只好躲入桃花源，独善一身。-想弯弧射天狼，挟着弓却不敢张开，怕祸及自己。-我曾经在北京黄金台揽涕痛哭，呼天喊地：燕昭王啊你在那里啊，怎么没有人识用人才？-无人珍贵骏马之骨，天马空自腾骧，不得大用。-即使乐毅再生，到如今这样的形势，也只有逃命的份儿。-岁月蹉跎，不得人意，驱骑马儿来到贵乡。-正逢你在悠闲地欣赏弦歌，肃穆地坐在华美的厅堂。-你如远古的百里之王候，陶然而卧如羲皇伏羲氏一般。-行乐在昌乐馆，大开酒筵，罗列壶觞。-青娥美女夹坐在贤豪之间，对着烛光俨然成双成行。-醉舞纷纷散满绮席，清歌袅袅绕飞尘梁。-欢娱完毕，你秩满（丧礼守孝期满）以后就要回归咸阳。-饮宴送行的有万人之多，帐蓬遥遥相望。-这一别，我俩各隔千里，荣枯不用，炎凉各自。-炎凉几度变化，九州几乎崩溃。-唐军抗战叛军，沙尘使云海昏暗无光。-连草木都摇着杀气，星辰更是无光。-白骨堆成丘山，苍生竟有何罪，遭此劫难。-潼关函谷关捍卫皇帝宫殿，国命悬于哥舒翰一身。-不料长戟三十万的大军，竟然开关门投降元凶。-公卿官僚犹如犬羊，忠诚正直的人变为肉酱。-二圣逃离京城，两座京城变为废墟。-帝子永王受皇上诏命，军事管制楚地。-永王节制并非是想做春秋五霸中齐桓公与晋文公，永王的军师却拥有勇猛的将士。-人心失去体统，贼势腾起风雨。-唯有你固守房陵郡，忠诚高节勇冠终古。-我那时云卧庐山香炉峰顶，学仙人餐霞漱瑶泉。-草堂门开九江流转，枕头下面五湖相连。-半夜永王的水军来浔阳，城里城外遍插旌旃。-我被空名自误，永王派兵迫胁我上了他的楼船。-他曾经赐与我五百两黄金，我把黄金视为浮烟。-我辞去永王的官却不受赏，反而远谪到夜郎那样的穷山恶水的地方。-夜郎离这里万里之遥道，西去令人衰老。-海内六合，扫荡清静，我却像负霜之草。-日月普照，并无私心，有什么办法可以诉冤给苍天听听。-你是神明的太守，深知仁心爱民。-惭愧作你的青云客，三次登上黄鹤楼。-惭愧不是祢衡处士，虚对鹦鹉洲。-樊山霸气已尽，天地一派寥落秋色。-长江漂流着峨眉山的雪水和三峡的急流。-万舸千舟江上往来，连帆一片过扬州。-登高极目，万里悠悠，旷然散我忧愁。-纱窗倚天而开，水树翠绿如少女青发。-看太阳，怕它马上落山，举起酒杯喜得明月。-吴越美女艳如花，窈窕婀娜，浓装艳抹。-呼来款款轻上云梯，含笑羞羞步出帘栊。-对着客人清唱小垂手，罗衣飘摇舞春风。-跪请宾客休息，主人情还未了。-浏览你在荆山的大作，堪与江淹鲍照的文笔媲美。-宛如出清水的芙蓉，有大自然天然去雕饰。-逸兴满溢平素的襟怀，无时不想到你的招寻约请。-朱门拥立虎士，兵戟罗列森森。-剪竹凿石，溪流清深宛然而去。-登高楼坐水阁，吐论滔滔不绝，声音清朗。-言辞贵于白璧，一诺重于黄金。-称我不愧于你，宛如青鸟有丹心。-云间五色的喜鹊，飞鸣着从天上飞来。-传闻是大赦的文书到了，却被流放夜郎去。-顿时就如没有暖气的寒谷，没有炎烟的死灰，没有希望了。-贤君你马上要登朝廷的凤凰池去了，别忘记了我这个被遗弃的贾谊，有机会推荐一下。-桀犬吠尧，古来之理，别让匈奴千秋笑话我们。-我常常在中夜失眠，唉声叹气，为这大国忧愁啊。-旌旆飘飘夹两岸之山，黄河当中奔流。-群雄相互牵掣，不能一致行动，面对战场犹豫不决。-如何才有善射的后羿那样的良将，一箭射落敌军的元凶。"><a href="#天上宫阙，白玉京城，有十二楼阁，五座城池。-仙人为我抚顶，结受长生命符。-突然想来人间一游，误逐世间的环乐，以尽前缘。-人间从开始到现在已经有九十六圣君，空名挂于浮云端。-以天地为赌注，一掷决定命运，一直战争不停。-我曾经学习霸王战略，希望能功成名就，锦衣返乡。-可是时运不佳，长期漂泊五湖四海。-曾经去山东学剑，没有什么结果，会写点文章，可那有什么用呢？-剑术并非万人之敌，防防身的技术，文章倒是四海闻名，罕有人匹敌。-这些都是些儿戏，微不足道，所以我象梁鸿一样看破了世界，唱着五噫歌离开西京长安。-不过在临去之时，我还是流下了慷慨激扬的泪水，打湿了我的帽上红缨。-叹君也是个倜傥之才，气质品格冠群英。-道旁设帐为我饯行，慰籍我此次远征的艰辛。-鞍马生涯如浮云，送我送在骠骑亭。-歌声钟鼓声表达不尽你的情意，白日马上就要落在昆明池中。-我曾经在某年十月到达幽州，看见安禄山的军阵兵甲灿烂如群星。-君王唐玄宗放弃东北河北，整个地区都由安禄山横行无忌，犹如长鲸在海洋横行。-呼吸之间就走遍百川，燕然山也仿佛可被他摧毁。-我心知我在皇上那里不得意，说也无用，只好躲入桃花源，独善一身。-想弯弧射天狼，挟着弓却不敢张开，怕祸及自己。-我曾经在北京黄金台揽涕痛哭，呼天喊地：燕昭王啊你在那里啊，怎么没有人识用人才？-无人珍贵骏马之骨，天马空自腾骧，不得大用。-即使乐毅再生，到如今这样的形势，也只有逃命的份儿。-岁月蹉跎，不得人意，驱骑马儿来到贵乡。-正逢你在悠闲地欣赏弦歌，肃穆地坐在华美的厅堂。-你如远古的百里之王候，陶然而卧如羲皇伏羲氏一般。-行乐在昌乐馆，大开酒筵，罗列壶觞。-青娥美女夹坐在贤豪之间，对着烛光俨然成双成行。-醉舞纷纷散满绮席，清歌袅袅绕飞尘梁。-欢娱完毕，你秩满（丧礼守孝期满）以后就要回归咸阳。-饮宴送行的有万人之多，帐蓬遥遥相望。-这一别，我俩各隔千里，荣枯不用，炎凉各自。-炎凉几度变化，九州几乎崩溃。-唐军抗战叛军，沙尘使云海昏暗无光。-连草木都摇着杀气，星辰更是无光。-白骨堆成丘山，苍生竟有何罪，遭此劫难。-潼关函谷关捍卫皇帝宫殿，国命悬于哥舒翰一身。-不料长戟三十万的大军，竟然开关门投降元凶。-公卿官僚犹如犬羊，忠诚正直的人变为肉酱。-二圣逃离京城，两座京城变为废墟。-帝子永王受皇上诏命，军事管制楚地。-永王节制并非是想做春秋五霸中齐桓公与晋文公，永王的军师却拥有勇猛的将士。-人心失去体统，贼势腾起风雨。-唯有你固守房陵郡，忠诚高节勇冠终古。-我那时云卧庐山香炉峰顶，学仙人餐霞漱瑶泉。-草堂门开九江流转，枕头下面五湖相连。-半夜永王的水军来浔阳，城里城外遍插旌旃。-我被空名自误，永王派兵迫胁我上了他的楼船。-他曾经赐与我五百两黄金，我把黄金视为浮烟。-我辞去永王的官却不受赏，反而远谪到夜郎那样的穷山恶水的地方。-夜郎离这里万里之遥道，西去令人衰老。-海内六合，扫荡清静，我却像负霜之草。-日月普照，并无私心，有什么办法可以诉冤给苍天听听。-你是神明的太守，深知仁心爱民。-惭愧作你的青云客，三次登上黄鹤楼。-惭愧不是祢衡处士，虚对鹦鹉洲。-樊山霸气已尽，天地一派寥落秋色。-长江漂流着峨眉山的雪水和三峡的急流。-万舸千舟江上往来，连帆一片过扬州。-登高极目，万里悠悠，旷然散我忧愁。-纱窗倚天而开，水树翠绿如少女青发。-看太阳，怕它马上落山，举起酒杯喜得明月。-吴越美女艳如花，窈窕婀娜，浓装艳抹。-呼来款款轻上云梯，含笑羞羞步出帘栊。-对着客人清唱小垂手，罗衣飘摇舞春风。-跪请宾客休息，主人情还未了。-浏览你在荆山的大作，堪与江淹鲍照的文笔媲美。-宛如出清水的芙蓉，有大自然天然去雕饰。-逸兴满溢平素的襟怀，无时不想到你的招寻约请。-朱门拥立虎士，兵戟罗列森森。-剪竹凿石，溪流清深宛然而去。-登高楼坐水阁，吐论滔滔不绝，声音清朗。-言辞贵于白璧，一诺重于黄金。-称我不愧于你，宛如青鸟有丹心。-云间五色的喜鹊，飞鸣着从天上飞来。-传闻是大赦的文书到了，却被流放夜郎去。-顿时就如没有暖气的寒谷，没有炎烟的死灰，没有希望了。-贤君你马上要登朝廷的凤凰池去了，别忘记了我这个被遗弃的贾谊，有机会推荐一下。-桀犬吠尧，古来之理，别让匈奴千秋笑话我们。-我常常在中夜失眠，唉声叹气，为这大国忧愁啊。-旌旆飘飘夹两岸之山，黄河当中奔流。-群雄相互牵掣，不能一致行动，面对战场犹豫不决。-如何才有善射的后羿那样的良将，一箭射落敌军的元凶。" class="headerlink" title="天上宫阙，白玉京城，有十二楼阁，五座城池。 仙人为我抚顶，结受长生命符。 突然想来人间一游，误逐世间的环乐，以尽前缘。 人间从开始到现在已经有九十六圣君，空名挂于浮云端。 以天地为赌注，一掷决定命运，一直战争不停。 我曾经学习霸王战略，希望能功成名就，锦衣返乡。 可是时运不佳，长期漂泊五湖四海。 曾经去山东学剑，没有什么结果，会写点文章，可那有什么用呢？ 剑术并非万人之敌，防防身的技术，文章倒是四海闻名，罕有人匹敌。 这些都是些儿戏，微不足道，所以我象梁鸿一样看破了世界，唱着五噫歌离开西京长安。 不过在临去之时，我还是流下了慷慨激扬的泪水，打湿了我的帽上红缨。 叹君也是个倜傥之才，气质品格冠群英。 道旁设帐为我饯行，慰籍我此次远征的艰辛。 鞍马生涯如浮云，送我送在骠骑亭。 歌声钟鼓声表达不尽你的情意，白日马上就要落在昆明池中。 我曾经在某年十月到达幽州，看见安禄山的军阵兵甲灿烂如群星。 君王唐玄宗放弃东北河北，整个地区都由安禄山横行无忌，犹如长鲸在海洋横行。 呼吸之间就走遍百川，燕然山也仿佛可被他摧毁。 我心知我在皇上那里不得意，说也无用，只好躲入桃花源，独善一身。 想弯弧射天狼，挟着弓却不敢张开，怕祸及自己。 我曾经在北京黄金台揽涕痛哭，呼天喊地：燕昭王啊你在那里啊，怎么没有人识用人才？ 无人珍贵骏马之骨，天马空自腾骧，不得大用。 即使乐毅再生，到如今这样的形势，也只有逃命的份儿。 岁月蹉跎，不得人意，驱骑马儿来到贵乡。 正逢你在悠闲地欣赏弦歌，肃穆地坐在华美的厅堂。 你如远古的百里之王候，陶然而卧如羲皇伏羲氏一般。 行乐在昌乐馆，大开酒筵，罗列壶觞。 青娥美女夹坐在贤豪之间，对着烛光俨然成双成行。 醉舞纷纷散满绮席，清歌袅袅绕飞尘梁。 欢娱完毕，你秩满（丧礼守孝期满）以后就要回归咸阳。 饮宴送行的有万人之多，帐蓬遥遥相望。 这一别，我俩各隔千里，荣枯不用，炎凉各自。 炎凉几度变化，九州几乎崩溃。 唐军抗战叛军，沙尘使云海昏暗无光。 连草木都摇着杀气，星辰更是无光。 白骨堆成丘山，苍生竟有何罪，遭此劫难。 潼关函谷关捍卫皇帝宫殿，国命悬于哥舒翰一身。 不料长戟三十万的大军，竟然开关门投降元凶。 公卿官僚犹如犬羊，忠诚正直的人变为肉酱。 二圣逃离京城，两座京城变为废墟。 帝子永王受皇上诏命，军事管制楚地。 永王节制并非是想做春秋五霸中齐桓公与晋文公，永王的军师却拥有勇猛的将士。 人心失去体统，贼势腾起风雨。 唯有你固守房陵郡，忠诚高节勇冠终古。 我那时云卧庐山香炉峰顶，学仙人餐霞漱瑶泉。 草堂门开九江流转，枕头下面五湖相连。 半夜永王的水军来浔阳，城里城外遍插旌旃。 我被空名自误，永王派兵迫胁我上了他的楼船。 他曾经赐与我五百两黄金，我把黄金视为浮烟。 我辞去永王的官却不受赏，反而远谪到夜郎那样的穷山恶水的地方。 夜郎离这里万里之遥道，西去令人衰老。 海内六合，扫荡清静，我却像负霜之草。 日月普照，并无私心，有什么办法可以诉冤给苍天听听。 你是神明的太守，深知仁心爱民。 惭愧作你的青云客，三次登上黄鹤楼。 惭愧不是祢衡处士，虚对鹦鹉洲。 樊山霸气已尽，天地一派寥落秋色。 长江漂流着峨眉山的雪水和三峡的急流。 万舸千舟江上往来，连帆一片过扬州。 登高极目，万里悠悠，旷然散我忧愁。 纱窗倚天而开，水树翠绿如少女青发。 看太阳，怕它马上落山，举起酒杯喜得明月。 吴越美女艳如花，窈窕婀娜，浓装艳抹。 呼来款款轻上云梯，含笑羞羞步出帘栊。 对着客人清唱小垂手，罗衣飘摇舞春风。 跪请宾客休息，主人情还未了。 浏览你在荆山的大作，堪与江淹鲍照的文笔媲美。 宛如出清水的芙蓉，有大自然天然去雕饰。 逸兴满溢平素的襟怀，无时不想到你的招寻约请。 朱门拥立虎士，兵戟罗列森森。 剪竹凿石，溪流清深宛然而去。 登高楼坐水阁，吐论滔滔不绝，声音清朗。 言辞贵于白璧，一诺重于黄金。 称我不愧于你，宛如青鸟有丹心。 云间五色的喜鹊，飞鸣着从天上飞来。 传闻是大赦的文书到了，却被流放夜郎去。 顿时就如没有暖气的寒谷，没有炎烟的死灰，没有希望了。 贤君你马上要登朝廷的凤凰池去了，别忘记了我这个被遗弃的贾谊，有机会推荐一下。 桀犬吠尧，古来之理，别让匈奴千秋笑话我们。 我常常在中夜失眠，唉声叹气，为这大国忧愁啊。 旌旆飘飘夹两岸之山，黄河当中奔流。 群雄相互牵掣，不能一致行动，面对战场犹豫不决。 如何才有善射的后羿那样的良将，一箭射落敌军的元凶。"></a>天上宫阙，白玉京城，有十二楼阁，五座城池。 仙人为我抚顶，结受长生命符。 突然想来人间一游，误逐世间的环乐，以尽前缘。 人间从开始到现在已经有九十六圣君，空名挂于浮云端。 以天地为赌注，一掷决定命运，一直战争不停。 我曾经学习霸王战略，希望能功成名就，锦衣返乡。 可是时运不佳，长期漂泊五湖四海。 曾经去山东学剑，没有什么结果，会写点文章，可那有什么用呢？ 剑术并非万人之敌，防防身的技术，文章倒是四海闻名，罕有人匹敌。 这些都是些儿戏，微不足道，所以我象梁鸿一样看破了世界，唱着五噫歌离开西京长安。 不过在临去之时，我还是流下了慷慨激扬的泪水，打湿了我的帽上红缨。 叹君也是个倜傥之才，气质品格冠群英。 道旁设帐为我饯行，慰籍我此次远征的艰辛。 鞍马生涯如浮云，送我送在骠骑亭。 歌声钟鼓声表达不尽你的情意，白日马上就要落在昆明池中。 我曾经在某年十月到达幽州，看见安禄山的军阵兵甲灿烂如群星。 君王唐玄宗放弃东北河北，整个地区都由安禄山横行无忌，犹如长鲸在海洋横行。 呼吸之间就走遍百川，燕然山也仿佛可被他摧毁。 我心知我在皇上那里不得意，说也无用，只好躲入桃花源，独善一身。 想弯弧射天狼，挟着弓却不敢张开，怕祸及自己。 我曾经在北京黄金台揽涕痛哭，呼天喊地：燕昭王啊你在那里啊，怎么没有人识用人才？ 无人珍贵骏马之骨，天马空自腾骧，不得大用。 即使乐毅再生，到如今这样的形势，也只有逃命的份儿。 岁月蹉跎，不得人意，驱骑马儿来到贵乡。 正逢你在悠闲地欣赏弦歌，肃穆地坐在华美的厅堂。 你如远古的百里之王候，陶然而卧如羲皇伏羲氏一般。 行乐在昌乐馆，大开酒筵，罗列壶觞。 青娥美女夹坐在贤豪之间，对着烛光俨然成双成行。 醉舞纷纷散满绮席，清歌袅袅绕飞尘梁。 欢娱完毕，你秩满（丧礼守孝期满）以后就要回归咸阳。 饮宴送行的有万人之多，帐蓬遥遥相望。 这一别，我俩各隔千里，荣枯不用，炎凉各自。 炎凉几度变化，九州几乎崩溃。 唐军抗战叛军，沙尘使云海昏暗无光。 连草木都摇着杀气，星辰更是无光。 白骨堆成丘山，苍生竟有何罪，遭此劫难。 潼关函谷关捍卫皇帝宫殿，国命悬于哥舒翰一身。 不料长戟三十万的大军，竟然开关门投降元凶。 公卿官僚犹如犬羊，忠诚正直的人变为肉酱。 二圣逃离京城，两座京城变为废墟。 帝子永王受皇上诏命，军事管制楚地。 永王节制并非是想做春秋五霸中齐桓公与晋文公，永王的军师却拥有勇猛的将士。 人心失去体统，贼势腾起风雨。 唯有你固守房陵郡，忠诚高节勇冠终古。 我那时云卧庐山香炉峰顶，学仙人餐霞漱瑶泉。 草堂门开九江流转，枕头下面五湖相连。 半夜永王的水军来浔阳，城里城外遍插旌旃。 我被空名自误，永王派兵迫胁我上了他的楼船。 他曾经赐与我五百两黄金，我把黄金视为浮烟。 我辞去永王的官却不受赏，反而远谪到夜郎那样的穷山恶水的地方。 夜郎离这里万里之遥道，西去令人衰老。 海内六合，扫荡清静，我却像负霜之草。 日月普照，并无私心，有什么办法可以诉冤给苍天听听。 你是神明的太守，深知仁心爱民。 惭愧作你的青云客，三次登上黄鹤楼。 惭愧不是祢衡处士，虚对鹦鹉洲。 樊山霸气已尽，天地一派寥落秋色。 长江漂流着峨眉山的雪水和三峡的急流。 万舸千舟江上往来，连帆一片过扬州。 登高极目，万里悠悠，旷然散我忧愁。 纱窗倚天而开，水树翠绿如少女青发。 看太阳，怕它马上落山，举起酒杯喜得明月。 吴越美女艳如花，窈窕婀娜，浓装艳抹。 呼来款款轻上云梯，含笑羞羞步出帘栊。 对着客人清唱小垂手，罗衣飘摇舞春风。 跪请宾客休息，主人情还未了。 浏览你在荆山的大作，堪与江淹鲍照的文笔媲美。 宛如出清水的芙蓉，有大自然天然去雕饰。 逸兴满溢平素的襟怀，无时不想到你的招寻约请。 朱门拥立虎士，兵戟罗列森森。 剪竹凿石，溪流清深宛然而去。 登高楼坐水阁，吐论滔滔不绝，声音清朗。 言辞贵于白璧，一诺重于黄金。 称我不愧于你，宛如青鸟有丹心。 云间五色的喜鹊，飞鸣着从天上飞来。 传闻是大赦的文书到了，却被流放夜郎去。 顿时就如没有暖气的寒谷，没有炎烟的死灰，没有希望了。 贤君你马上要登朝廷的凤凰池去了，别忘记了我这个被遗弃的贾谊，有机会推荐一下。 桀犬吠尧，古来之理，别让匈奴千秋笑话我们。 我常常在中夜失眠，唉声叹气，为这大国忧愁啊。 旌旆飘飘夹两岸之山，黄河当中奔流。 群雄相互牵掣，不能一致行动，面对战场犹豫不决。 如何才有善射的后羿那样的良将，一箭射落敌军的元凶。</h5>]]></content>
      <categories>
        <category>古文鉴赏</category>
      </categories>
      <tags>
        <tag>李白</tag>
        <tag>白玉京</tag>
      </tags>
  </entry>
  <entry>
    <title>程序的安装</title>
    <url>/2023/10/30/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="程序的安装"><a href="#程序的安装" class="headerlink" title="程序的安装"></a>程序的安装</h1><h3 id="一、安装python开发环境"><a href="#一、安装python开发环境" class="headerlink" title="一、安装python开发环境"></a>一、安装python开发环境</h3><p>一、进入安装地址：<a href="https://www.python.org/">python</a></p>
<p><img src="/2023/10/30/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%89%E8%A3%85/image-20231029215320342.png" alt="image-20231029215320342"></p>
<p>二、点击Download</p>
<p><img src="/2023/10/30/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%89%E8%A3%85/image-20231029215409352.png" alt="image-20231029215409352"></p>
<p>三、打开文件并勾选</p>
<p><img src="/2023/10/30/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%89%E8%A3%85/image-20231029215505778.png" alt="image-20231029215505778"></p>
<p>四、点击自定义（更改路径）</p>
<p><img src="/2023/10/30/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%89%E8%A3%85/image-20231029215627851.png" alt="image-20231029215627851"></p>
<p>五、下一步安装</p>
<p><img src="/2023/10/30/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%89%E8%A3%85/image-20231029215734808.png" alt="image-20231029215734808"></p>
<p>六、点击关闭路径长度的限制</p>
<p>安装完成！！！！！！</p>
<p>验证：进入电脑终端</p>
<p><img src="/2023/10/30/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%89%E8%A3%85/image-20231029215942117.png" alt="image-20231029215942117"></p>
<p>问题：</p>
<p><img src="/2023/10/30/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%89%E8%A3%85/image-20231029220157744.png" alt="image-20231029220157744"></p>
]]></content>
      <categories>
        <category>开发环境</category>
        <category>程序</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>文案</title>
    <url>/2020/05/05/%E6%96%87%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>我拥向宇宙吹来的风，于九月盛景，是初秋相逢。而你，随风来。</center>

<p><img src="https://pic1.zhimg.com/v2-3ce49aa01f7e83ebab1278904f1eb544_r.jpg?source=1940ef5c"></p>
<blockquote>
<p><strong>哪怕是一只萤火虫喜欢上月亮，它也会想把自己所有的光都给它。跟喜欢的人多强大没关系，这是跳动不止的心意。——《春日宴》</strong></p>
</blockquote>
<blockquote>
<p>别偷偷拆开那信件 落笔的人红了脸 ——《小尖尖》</p>
</blockquote>
<blockquote>
<p>我偶尔爱你，爱你人前光鲜、璀璨，像是流星； 我永远爱你，爱你人后的脆弱、用心，自然而然。—— 《<a href="https://www.zhihu.com/search?q=%E4%BA%BA%E5%88%B0%E4%BA%86%E7%BE%8E%E6%9C%AF%E9%A6%86%E4%BC%9A%E5%A5%BD%E7%9C%8B%E8%B5%B7%E6%9D%A5&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1854684457%7D">人到了美术馆会好看起来</a>》 </p>
</blockquote>
<blockquote>
<p>悲喜交替 无有终点——《<a href="https://www.zhihu.com/search?q=%E6%A9%98%E5%AD%90%E4%B8%8D%E6%98%AF%E5%94%AF%E4%B8%80%E7%9A%84%E6%B0%B4%E6%9E%9C&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1854684457%7D">橘子不是唯一的水果</a>》</p>
</blockquote>
<blockquote>
<p> 他们站在噼啪作响的炉火旁，拥抱亲吻，断断续续地讲胡话，窃窃私语，笑着，吻了又吻。——《战争风云》</p>
</blockquote>
<blockquote>
<p> 行路难，不在山，不在水，只在人情反覆间。——白居易《<a href="https://www.zhihu.com/search?q=%E5%A4%AA%E8%A1%8C%E8%B7%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1854684457%7D">太行路</a>》</p>
</blockquote>
<blockquote>
<p>我想我今生顶天立地，来生必仗剑天涯，看明月天山外，苍茫云海间，风景不殊，山河尤是。——《<a href="https://www.zhihu.com/search?q=%E5%8C%97%E4%BA%AC%E6%B3%95%E6%BA%90%E5%AF%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1854684457%7D">北京法源寺</a>》**</p>
</blockquote>
<blockquote>
<p>世界上有那么多的城镇，城镇中有那么多的酒馆，她却走进了我的。——《卡萨布兰卡》</p>
</blockquote>
<blockquote>
<p> 我想这个世界里，虽然没有最美好的相遇，但一定有为了相遇或者重逢，所做的最美好的努力。——《<a href="https://www.zhihu.com/search?q=%E6%B5%81%E6%B5%AA%E7%9A%84%E6%98%9F%E6%98%9F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1854684457%7D">流浪的星星</a>》</p>
</blockquote>
<blockquote>
<p> 时时觉得自己仿佛孤单一人坐在深深的井底，谁也不会赶来相救。——村上春树《<a href="https://www.zhihu.com/search?q=%E6%88%91%E7%9A%84%E8%81%8C%E4%B8%9A%E6%98%AF%E5%B0%8F%E8%AF%B4%E5%AE%B6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1854684457%7D">我的职业是小说家</a>》</p>
</blockquote>
<blockquote>
<p>因为我们活过的刹那 前后皆是黑夜。 ——<a href="https://www.zhihu.com/search?q=%E8%B4%B9%E5%B0%94%E5%8D%97%E5%A4%9A%E4%BD%A9%E7%B4%A2%E9%98%BF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1854684457%7D">费尔南多佩索阿</a></p>
</blockquote>
<blockquote>
<p>喜欢就是骨头里都在冒泡泡。——《尘埃落尽》</p>
</blockquote>
<blockquote>
<p>那就折一张阔些的荷叶 包一片月光回去 回去夹在唐诗里 扁扁的 像压过的相思——余光中**</p>
</blockquote>
<blockquote>
<p> 我衰老，也年轻。 我愚蠢，也睿智。 对他人我漠视，也不失关心。 母性与父性，共集一身。 我是孩子，也是大人。 我粗俗，也有文雅。——《<a href="https://www.zhihu.com/search?q=%E5%B8%83%E9%B2%81%E5%85%8B%E6%9E%97%E6%9C%89%E6%A3%B5%E6%A0%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1854684457%7D">布鲁克林有棵树</a>》</p>
</blockquote>
<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.2a7371032d2c622cab7dc691bd1a76ad?rik=QG9CWpF8vrxhmA&riu=http://pic.bizhi360.com/bbpic/15/3915.jpg&ehk=oirjjC5Q+hHF4N0w0Vxipk+tWp/jE/RCgb4mGvYw/tI=&risl=&pid=ImgRaw&r=0"></p>
<blockquote>
<p> 很多人不需要再见，因为只是路过而已，遗忘就是我们给彼此最好的纪念。  ——林徽因</p>
</blockquote>
<blockquote>
<p>一个人，一本书，一杯茶，一帘梦。有时候，寂寞是这样叫人心动，也只有此刻，世事才会如此波澜不惊。</p>
</blockquote>
<blockquote>
<p>不必太纠结于当下，也不必太忧虑未来，当你经历过一些事情的时候，眼前的风景已经和从前不一样了。</p>
</blockquote>
<blockquote>
<p>在广袤的空间和无限的时间中，能与你共享同一颗行星和同一段时光是我的荣幸。</p>
</blockquote>
<blockquote>
<p>温柔要有，但不是妥协，我们要在安静中不慌不忙的坚强。</p>
</blockquote>
<blockquote>
<p>时间或许像灯光，日照褪尽了才能看见，彼此靠近但是没有关联，一盏熄灭了，另一盏刚好亮了。</p>
</blockquote>
<blockquote>
<p>努力让自己发光，对的人才会迎光而来。</p>
</blockquote>
<blockquote>
<p>哪来的天生优秀，都是一步一个坑踩过来的。</p>
</blockquote>
<blockquote>
<p>你未必万丈光芒，但你温暖有光。</p>
</blockquote>
<blockquote>
<p>你的眸是深情的海，满山的花，堕落了我所有的温情。</p>
</blockquote>
]]></content>
      <categories>
        <category>文案</category>
      </categories>
  </entry>
  <entry>
    <title>软件推荐</title>
    <url>/2023/09/05/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h1><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a><strong>软件</strong></h2><h3 id="1、Obsidian（黑曜石）"><a href="#1、Obsidian（黑曜石）" class="headerlink" title="1、Obsidian（黑曜石）"></a>1、Obsidian（黑曜石）</h3><p>一款完美的科研笔记&#x2F;知识管理软件，基于<strong>Markdown文件</strong>的<strong>本地</strong>知识管理软件。</p>
<p>[官网](<a href="https://obsidian.md/">Obsidian - Sharpen your thinking</a>)</p>
<p><img src="/2023/09/05/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/image-20231031174143081.png" alt="image-20231031174143081"></p>
<p>[基本使用](<a href="https://zhuanlan.zhihu.com/p/398625612">Obsidian知识体系搭建：小白入门篇 - 知乎 (zhihu.com)</a>)</p>
<p><strong>优点：</strong></p>
<ul>
<li>Obsidian是基于<strong>Markdown文件</strong>的<strong>本地</strong>知识管理软件，并且开发者承诺Obsidian对于个人使用者<strong>永久免费</strong>。</li>
<li>Obsidian本地储存的特性不仅使得【<strong>信息安全</strong>】得到一定保障而且能够更好地和其他本地软件联动。</li>
<li>（第二大脑）使用标签系统、Moc、双链，可以将非线性知识模块连接起来，形成属于自己的脑图。</li>
<li>（双向链接）用<code>[[]]</code> 可以将关键词联系起来，只要点击关键词就可以跳转到与关键词相连的内容。</li>
<li>基于Markdown文件的本地存储，可以很方便的转移自己的笔记，并且是本地存储的，所以安全性十足。</li>
</ul>
]]></content>
      <categories>
        <category>推荐</category>
      </categories>
      <tags>
        <tag>软件推荐</tag>
      </tags>
  </entry>
</search>
